facet_grid(Depth ~ Gate, scales = "fixed", switch = "both") + # Facets for Depth and Gate
scale_fill_manual(values = custom_palette) +
labs(
title = "Distribution of Events Across Location_Station",
x = "Location_Station",
y = "Number of Events"
) +
theme_bw() +
theme(
strip.background = element_rect(fill = "lightgray", colour = "black"),
strip.text = element_text(size = 10, face = "bold"),
axis.text.x = element_text(angle = 90)
)
ggsave("phyto_abundance_facet_plot_depths.svg", width = 24, height = 8, dpi = 800)
# Create the plot with facets for Depth and Gate
ggplot(phyto_counts %>%
filter(!Gate %in% c(0, 1, 14, 3, 4, 5, 6))
, aes(x = Location_Station, y = cells_per_mL, fill = Location_Station)) +
geom_bar(stat = "identity") + # Bar plot with count of events
facet_grid(Depth ~ Gate, scales = "fixed", switch = "both") + # Facets for Depth and Gate
scale_fill_manual(values = custom_palette) +
labs(
title = "Distribution of Events Across Location_Station",
x = "Location_Station",
y = "Number of Events"
) +
theme_bw() +
theme(
strip.background = element_rect(fill = "lightgray", colour = "black"),
strip.text = element_text(size = 10, face = "bold"),
axis.text.x = element_text(angle = 90)
)
# Add PCA results and metadata back to the dataset
pca_data <- pca_data %>%
mutate(
PC1 = pca_result$x[, 1],
PC2 = pca_result$x[, 2]
)
View(phyto_counts)
View(flowrate)
View(measurement_info)
measurement_info <- measurement_info %>%
mutate(Date = case_when(
grepl("Cruise_NorthSea_PE477_Algae_PE477_7_7m_Bottle3.fcs", File) ~ "11-MAY-2021",
TRUE ~ NA_character_
)) %>%
mutate(Station_Number = as.integer(Station_Number),
Depth = as.integer(Depth))%>%
na.omit()
{library(flowCore)
fcs_dir <- "C:/Users/hisham.shaikh/OneDrive - UGent/Projects/Microbial_Abundances/Microbial_Abundances_NJ2020_PE477_PE486/Algal_Abundances_NJ2020_PE477_PE486/Raw_Data_Algal_Abundances_NJ2020_PE477_PE486/PE477_PE486_Algal_Files"
fcs_files <- list.files(fcs_dir, pattern = "\\.fcs$", full.names = TRUE)
# Initialize a data frame to store results
measurement_info <- data.frame(File = basename(fcs_files), Date = NA, Acquisition_Duration = NA)
# Loop through each file and extract metadata
for (i in seq_along(fcs_files)) {
tryCatch({
fcs_data <- read.FCS(fcs_files[i], transformation = FALSE, truncate_max_range = FALSE)
metadata <- keyword(fcs_data)  # Extract metadata
# Extract measurement date
measurement_info$Date[i] <- metadata[["$DATE"]]
# Extract and compute measurement duration
if (!is.null(metadata[["$BTIM"]]) && !is.null(metadata[["$ETIM"]])) {
start_time <- as.POSIXct(metadata[["$BTIM"]], format="%H:%M:%S")
end_time <- as.POSIXct(metadata[["$ETIM"]], format="%H:%M:%S")
measurement_info$Acquisition_Duration[i] <- as.numeric(difftime(end_time, start_time, units="mins"))
} else {
measurement_info$Acquisition_Duration[i] <- NA  # Assign NA if time info is missing
}
}, error = function(e) {
message(paste("Skipping file due to error:", fcs_files[i]))  # Print message
measurement_info$Date[i] <- NA
measurement_info$Acquisition_Duration[i] <- NA
})
}
measurement_info <- measurement_info %>%
mutate(Tag = sub(".*_(PE\\d+_\\d+_\\d+).*", "\\1", File)) %>%
dplyr::filter(!grepl("Cruise_NorthSea", Tag))%>%
separate(Tag, into = c("Location", "Station_Number", "Depth"), sep = "_", convert = TRUE) %>%
mutate(Acquisition_Duration = round(replace_na(Acquisition_Duration, 10)))
}
measurement_info <- measurement_info %>%
mutate(Date = case_when(
grepl("Cruise_NorthSea_PE477_Algae_PE477_7_7m_Bottle3.fcs", File) ~ "11-MAY-2021",
TRUE ~ NA_character_
)) %>%
mutate(Station_Number = as.integer(Station_Number),
Depth = as.integer(Depth))%>%
na.omit()
dplyr::last_dplyr_warnings()
{library(flowCore)
fcs_dir <- "C:/Users/hisham.shaikh/OneDrive - UGent/Projects/Microbial_Abundances/Microbial_Abundances_NJ2020_PE477_PE486/Algal_Abundances_NJ2020_PE477_PE486/Raw_Data_Algal_Abundances_NJ2020_PE477_PE486/PE477_PE486_Algal_Files"
fcs_files <- list.files(fcs_dir, pattern = "\\.fcs$", full.names = TRUE)
# Initialize a data frame to store results
measurement_info <- data.frame(File = basename(fcs_files), Date = NA, Acquisition_Duration = NA)
# Loop through each file and extract metadata
for (i in seq_along(fcs_files)) {
tryCatch({
fcs_data <- read.FCS(fcs_files[i], transformation = FALSE, truncate_max_range = FALSE)
metadata <- keyword(fcs_data)  # Extract metadata
# Extract measurement date
measurement_info$Date[i] <- metadata[["$DATE"]]
# Extract and compute measurement duration
if (!is.null(metadata[["$BTIM"]]) && !is.null(metadata[["$ETIM"]])) {
start_time <- as.POSIXct(metadata[["$BTIM"]], format="%H:%M:%S")
end_time <- as.POSIXct(metadata[["$ETIM"]], format="%H:%M:%S")
measurement_info$Acquisition_Duration[i] <- as.numeric(difftime(end_time, start_time, units="mins"))
} else {
measurement_info$Acquisition_Duration[i] <- NA  # Assign NA if time info is missing
}
}, error = function(e) {
message(paste("Skipping file due to error:", fcs_files[i]))  # Print message
measurement_info$Date[i] <- NA
measurement_info$Acquisition_Duration[i] <- NA
})
}
measurement_info <- measurement_info %>%
mutate(Tag = sub(".*_(PE\\d+_\\d+_\\d+).*", "\\1", File)) %>%
dplyr::filter(!grepl("Cruise_NorthSea", Tag))%>%
separate(Tag, into = c("Location", "Station_Number", "Depth"), sep = "_", convert = TRUE) %>%
mutate(Acquisition_Duration = round(replace_na(Acquisition_Duration, 10)))
}
measurement_info <- measurement_info %>%
mutate(Date = case_when(
grepl("Cruise_NorthSea_PE477_Algae_PE477_7_7m_Bottle3.fcs", File) ~ "11-MAY-2021",
TRUE ~ NA_character_
)) %>%
mutate(Station_Number = as.integer(Station_Number),
Depth = as.integer(Depth))%>%
na.omit()
measurement_info <- measurement_info %>%
mutate(Date = case_when(
grepl("Cruise_NorthSea_PE477_Algae_PE477_7_7m_Bottle3.fcs", File) ~ "11-MAY-2021",
TRUE ~ NA_character_
)) %>%
mutate(Station_Number = as.integer(Station_Number),
Depth = as.integer(Depth))%>%
na.omit()
View(measurement_info)
{library(flowCore)
fcs_dir <- "C:/Users/hisham.shaikh/OneDrive - UGent/Projects/Microbial_Abundances/Microbial_Abundances_NJ2020_PE477_PE486/Algal_Abundances_NJ2020_PE477_PE486/Raw_Data_Algal_Abundances_NJ2020_PE477_PE486/PE477_PE486_Algal_Files"
fcs_files <- list.files(fcs_dir, pattern = "\\.fcs$", full.names = TRUE)
# Initialize a data frame to store results
measurement_info <- data.frame(File = basename(fcs_files), Date = NA, Acquisition_Duration = NA)
# Loop through each file and extract metadata
for (i in seq_along(fcs_files)) {
tryCatch({
fcs_data <- read.FCS(fcs_files[i], transformation = FALSE, truncate_max_range = FALSE)
metadata <- keyword(fcs_data)  # Extract metadata
# Extract measurement date
measurement_info$Date[i] <- metadata[["$DATE"]]
# Extract and compute measurement duration
if (!is.null(metadata[["$BTIM"]]) && !is.null(metadata[["$ETIM"]])) {
start_time <- as.POSIXct(metadata[["$BTIM"]], format="%H:%M:%S")
end_time <- as.POSIXct(metadata[["$ETIM"]], format="%H:%M:%S")
measurement_info$Acquisition_Duration[i] <- as.numeric(difftime(end_time, start_time, units="mins"))
} else {
measurement_info$Acquisition_Duration[i] <- NA  # Assign NA if time info is missing
}
}, error = function(e) {
message(paste("Skipping file due to error:", fcs_files[i]))  # Print message
measurement_info$Date[i] <- NA
measurement_info$Acquisition_Duration[i] <- NA
})
}
measurement_info <- measurement_info %>%
mutate(Tag = sub(".*_(PE\\d+_\\d+_\\d+).*", "\\1", File)) %>%
dplyr::filter(!grepl("Cruise_NorthSea", Tag))%>%
separate(Tag, into = c("Location", "Station_Number", "Depth"), sep = "_", convert = TRUE) %>%
mutate(Acquisition_Duration = round(replace_na(Acquisition_Duration, 10)))
}
View(measurement_info)
measurement_info <- measurement_info %>%
mutate(Date = case_when(
grepl("Cruise_NorthSea_PE477_Algae_PE477_7_7m_Bottle3.fcs", File) ~ "11-MAY-2021",
TRUE ~ NA_character_
))
View(measurement_info)
{library(flowCore)
fcs_dir <- "C:/Users/hisham.shaikh/OneDrive - UGent/Projects/Microbial_Abundances/Microbial_Abundances_NJ2020_PE477_PE486/Algal_Abundances_NJ2020_PE477_PE486/Raw_Data_Algal_Abundances_NJ2020_PE477_PE486/PE477_PE486_Algal_Files"
fcs_files <- list.files(fcs_dir, pattern = "\\.fcs$", full.names = TRUE)
# Initialize a data frame to store results
measurement_info <- data.frame(File = basename(fcs_files), Date = NA, Acquisition_Duration = NA)
# Loop through each file and extract metadata
for (i in seq_along(fcs_files)) {
tryCatch({
fcs_data <- read.FCS(fcs_files[i], transformation = FALSE, truncate_max_range = FALSE)
metadata <- keyword(fcs_data)  # Extract metadata
# Extract measurement date
measurement_info$Date[i] <- metadata[["$DATE"]]
# Extract and compute measurement duration
if (!is.null(metadata[["$BTIM"]]) && !is.null(metadata[["$ETIM"]])) {
start_time <- as.POSIXct(metadata[["$BTIM"]], format="%H:%M:%S")
end_time <- as.POSIXct(metadata[["$ETIM"]], format="%H:%M:%S")
measurement_info$Acquisition_Duration[i] <- as.numeric(difftime(end_time, start_time, units="mins"))
} else {
measurement_info$Acquisition_Duration[i] <- NA  # Assign NA if time info is missing
}
}, error = function(e) {
message(paste("Skipping file due to error:", fcs_files[i]))  # Print message
measurement_info$Date[i] <- NA
measurement_info$Acquisition_Duration[i] <- NA
})
}
measurement_info <- measurement_info %>%
mutate(Tag = sub(".*_(PE\\d+_\\d+_\\d+).*", "\\1", File)) %>%
dplyr::filter(!grepl("Cruise_NorthSea", Tag))%>%
separate(Tag, into = c("Location", "Station_Number", "Depth"), sep = "_", convert = TRUE) %>%
mutate(Acquisition_Duration = round(replace_na(Acquisition_Duration, 10)))
}
measurement_info <- measurement_info %>%
mutate(Date = case_when(
grepl("Cruise_NorthSea_PE477_Algae_PE477_7_7m_Bottle3.fcs", File) ~ "11-MAY-2021",
!is.na(Date) ~ Date,  # Preserve existing Date values
TRUE ~ NA_character_   # Keep NA for others without modification
))
measurement_info <- measurement_info  %>%
mutate(Station_Number = as.integer(Station_Number),
Depth = as.integer(Depth))%>%
na.omit()
phyto_counts <- phyto_counts %>%
left_join(measurement_info %>% select(Location, Station_Number, Depth, Acquisition_Duration),
by = c("Location", "Station_Number", "Depth")) %>%
# Add Flow Rate based on Location
mutate(Flow_Rate = case_when(
Location == "PE477" ~ 129,   # Flow rate for PE477
Location == "PE486" ~ 107,   # Flow rate for PE486
TRUE ~ NA_real_            # Assign NA if Location is neither
)) %>%
# Calculate Cells per mL
mutate(cells_per_mL = Total_Events / (Acquisition_Duration * Flow_Rate * 1e-3))
write.csv(phyto_counts, file = "./phytoplankton_counts_pe477_pe486.csv", row.names= F)
View(phyto_counts)
View(measurement_info)
View(flowrate)
View(phyto_counts)
View(measurement_info)
phyto_counts %>%
left_join(measurement_info %>% select(Location, Station_Number, Depth, Acquisition_Duration),
by = c("Location", "Station_Number", "Depth"))
phyto_counts <- do.call(rbind, stacked_data)
phyto_counts <- phyto_counts %>%
mutate(Tag = sub(".*_(PE\\d+_\\d+_\\d+).*", "\\1", Filename)) %>%
dplyr::filter(!grepl("Cruise_NorthSea", Tag)) %>%
separate(Tag, into = c("Location", "Station_Number", "Depth"), sep = "_", convert = TRUE) %>%
mutate(
Overlay_Gate = gsub("Gate ", "", Overlay_Gate),
Gate = gsub("Gate ", "", Gate),
Gate = ifelse(tolower(Gate) == "none", "0", Gate)  # Replace "None" with "O"
) %>%
mutate(Location_Station = paste(Location, Station_Number, sep = "_")) %>%
dplyr::filter(Depth %in% c(7, 15, 30)) %>%
#filter(!Location_Station %in% c("PE477_7", "PE486_8")) %>%
dplyr::filter(!grepl("SSC425", Filename)) %>%
dplyr::filter(!grepl("8m", Filename)) %>%
dplyr::filter(!grepl("Bottle11", Filename))
{library(flowCore)
fcs_dir <- "C:/Users/hisham.shaikh/OneDrive - UGent/Projects/Microbial_Abundances/Microbial_Abundances_NJ2020_PE477_PE486/Algal_Abundances_NJ2020_PE477_PE486/Raw_Data_Algal_Abundances_NJ2020_PE477_PE486/PE477_PE486_Algal_Files"
fcs_files <- list.files(fcs_dir, pattern = "\\.fcs$", full.names = TRUE)
# Initialize a data frame to store results
measurement_info <- data.frame(File = basename(fcs_files), Date = NA, Acquisition_Duration = NA)
# Loop through each file and extract metadata
for (i in seq_along(fcs_files)) {
tryCatch({
fcs_data <- read.FCS(fcs_files[i], transformation = FALSE, truncate_max_range = FALSE)
metadata <- keyword(fcs_data)  # Extract metadata
# Extract measurement date
measurement_info$Date[i] <- metadata[["$DATE"]]
# Extract and compute measurement duration
if (!is.null(metadata[["$BTIM"]]) && !is.null(metadata[["$ETIM"]])) {
start_time <- as.POSIXct(metadata[["$BTIM"]], format="%H:%M:%S")
end_time <- as.POSIXct(metadata[["$ETIM"]], format="%H:%M:%S")
measurement_info$Acquisition_Duration[i] <- as.numeric(difftime(end_time, start_time, units="mins"))
} else {
measurement_info$Acquisition_Duration[i] <- NA  # Assign NA if time info is missing
}
}, error = function(e) {
message(paste("Skipping file due to error:", fcs_files[i]))  # Print message
measurement_info$Date[i] <- NA
measurement_info$Acquisition_Duration[i] <- NA
})
}
measurement_info <- measurement_info %>%
mutate(Tag = sub(".*_(PE\\d+_\\d+_\\d+).*", "\\1", File)) %>%
dplyr::filter(!grepl("Cruise_NorthSea", Tag))%>%
separate(Tag, into = c("Location", "Station_Number", "Depth"), sep = "_", convert = TRUE) %>%
mutate(Acquisition_Duration = round(replace_na(Acquisition_Duration, 10)))
}
measurement_info <- measurement_info %>%
mutate(Date = case_when(
grepl("Cruise_NorthSea_PE477_Algae_PE477_7_7m_Bottle3.fcs", File) ~ "11-MAY-2021",
!is.na(Date) ~ Date,  # Preserve existing Date values
TRUE ~ NA_character_   # Keep NA for others without modification
))
measurement_info <- measurement_info  %>%
mutate(Station_Number = as.integer(Station_Number),
Depth = as.integer(Depth))%>%
na.omit()
phyto_counts <- phyto_counts %>%
left_join(measurement_info %>% select(Location, Station_Number, Depth, Acquisition_Duration),
by = c("Location", "Station_Number", "Depth")) %>%
# Add Flow Rate based on Location
mutate(Flow_Rate = case_when(
Location == "PE477" ~ 129,   # Flow rate for PE477
Location == "PE486" ~ 107,   # Flow rate for PE486
TRUE ~ NA_real_            # Assign NA if Location is neither
)) %>%
# Calculate Cells per mL
mutate(cells_per_mL = Total_Events / (Acquisition_Duration * Flow_Rate * 1e-3))
write.csv(phyto_counts, file = "./phytoplankton_counts_pe477_pe486.csv", row.names= F)
View(counts_metadata)
View(abundance_abiotic)
nutrients_ts
head(nutrients_ts)
limits <- c(TON = 0.01529 / 2,
Nitrite = 0.0393 / 2,
Phosphate = 0.0152 / 2,
Silicate = 0.0711 / 2)
# Replace negatives and zeros
nutrients_ts <- nutrients_ts %>%
mutate(
TON = ifelse(TON <= 0, limits["TON"], TON),
Nitrite = ifelse(Nitrite <= 0, limits["Nitrite"], Nitrite),
Phosphate = ifelse(Phosphate <= 0, limits["Phosphate"], Phosphate),
Silicate = ifelse(Silicate <= 0, limits["Silicate"], Silicate)
)
library(tidyverse)
# Replace negatives and zeros
nutrients_ts <- nutrients_ts %>%
mutate(
TON = ifelse(TON <= 0, limits["TON"], TON),
Nitrite = ifelse(Nitrite <= 0, limits["Nitrite"], Nitrite),
Phosphate = ifelse(Phosphate <= 0, limits["Phosphate"], Phosphate),
Silicate = ifelse(Silicate <= 0, limits["Silicate"], Silicate)
)
View(nutrients_ts)
# Replace negatives and zeros
nutrients_ts <- nutrients_ts %>%
mutate(
TON = ifelse(TON <= 0, limits["TON"], TON),
Nitrite = ifelse(Nitrite <= 0, limits["Nitrite"], Nitrite),
Phosphate = ifelse(Phosphate <= 0, limits["Phosphate"], Phosphate),
Silicate = ifelse(Silicate <= 0, limits["Silicate"], Silicate)
) %>%
dplyr::mutate(Nitrate = TON - Nitrite)
(0.01529 / 2) - (0.0393 / 2)
min(abs(nutrients_ts$Nitrate))
nutrients_ts$Nitrate
# Since there are still negative values in Nitrate. We will repalce them by half of minimum absolute avleus
nutrients_ts <- nutrients_ts %>%
mutate(
Nitrate = ifelse(Nitrate <= 0, min(abs(nutrients_ts$Nitrate)), Nitrate)
)
nutrients_ts$Nitrate
nutrients_ts<- openxlsx::read.xlsx("Metadata/Metadata_Microbial_Abundances_NJ2020_PE477_PE486.xlsx",
sheet = "Nutrients")
#Load packages
{
library("tidyverse")
library("magrittr")
library("readxl")
library("readr")
}
nutrients_ts<- openxlsx::read.xlsx("Metadata/Metadata_Microbial_Abundances_NJ2020_PE477_PE486.xlsx",
sheet = "Nutrients")
install.packages("openxlsx")
library("openxlsx")
nutrients_ts<- openxlsx::read.xlsx("Metadata/Metadata_Microbial_Abundances_NJ2020_PE477_PE486.xlsx",
sheet = "Nutrients")
limits <- c(TON = 0.01529 / 2,
Nitrite = 0.0393 / 2,
Phosphate = 0.0152 / 2,
Silicate = 0.0711 / 2)
# Replace negatives and zeros
nutrients_ts <- nutrients_ts %>%
mutate(
TON = ifelse(TON <= 0, limits["TON"], TON),
Nitrite = ifelse(Nitrite <= 0, limits["Nitrite"], Nitrite),
Phosphate = ifelse(Phosphate <= 0, limits["Phosphate"], Phosphate),
Silicate = ifelse(Silicate <= 0, limits["Silicate"], Silicate)
) %>%
dplyr::mutate(Nitrate = TON - Nitrite)
# Since there are still negative values in Nitrate. We will repalce them by half of minimum absolute avleus
nutrients_ts <- nutrients_ts %>%
mutate(
Nitrate = ifelse(Nitrate <= 0, min(abs(nutrients_ts$Nitrate))/2, Nitrate)
)
nutrients_ts[nutrients_ts$Location == 'NJ2020',]$Depth <- 1
View(nutrients_ts)
NJ2020_abundance<- merge(NJ2020_abundance, coordinates[coordinates$Location == 'NJ2020', c(1,3,4)], by = "Location")
cruise_abundance<- merge(cruise_abundance, coordinates[coordinates$Location %in% c('PE477', 'PE486'),]  )
NJ2020_abundance<- merge(NJ2020_abundance, nutrients_ts[nutrients_ts$Location == 'NJ2020',],
by = c("Location", "Expt_No"))
cruise_abundance<- merge(cruise_abundance, nutrients_ts[nutrients_ts$Location %in% c('PE477', 'PE486'),])
nutrients_ts$Nitrate
limits
nutrients_ts[nutrients_ts$Location == 'NJ2020',]$Depth <- 1
NJ2020_abundance<- merge(NJ2020_abundance, coordinates[coordinates$Location == 'NJ2020', c(1,3,4)], by = "Location")
cruise_abundance<- merge(cruise_abundance, coordinates[coordinates$Location %in% c('PE477', 'PE486'),]  )
NJ2020_abundance<- merge(NJ2020_abundance, nutrients_ts[nutrients_ts$Location == 'NJ2020',],
by = c("Location", "Expt_No"))
cruise_abundance<- merge(cruise_abundance, nutrients_ts[nutrients_ts$Location %in% c('PE477', 'PE486'),])
#Combine and save as csv Save as a csv file
abundance_abiotic <- rbind(NJ2020_abundance, cruise_abundance)
View(abundance_abiotic)
dim(NJ2020_abundance)
dim(cruise_abundance)
head(NJ2020_abundance)
head(cruise_abundance)
#for now I am manually deleting the ones that don't belong
#first only take the depths needed.
NJ2020<- abundance[abundance$Location == 'NJ2020',]
cruises<-abundance[abundance$Depth %in% c(7.0, 15.0, 30.0),]
to_delete<- c("BA210507.008", "VI210507.013", "VI210507.016")
for (delete in to_delete){
cruises<- cruises[!(cruises$Sample_Name == delete),]
}
{
viruses<- cruises[which(cruises$Staining_Protocol == 'Viruses'),] %>%
select(-c(Staining_Protocol, c_Bacteria, c_HNA, c_LNA, Comments)) %>%
stats::setNames(c("Viral_Sample_Name", "Expt_Date", "Location", "Expt_No", "Depth", "Total_Viruses", "V1", "V2", "V3"))
bacteria<- cruises[which(cruises$Staining_Protocol == 'Bacteria'),] %>%
select(-c(Staining_Protocol, c_Viruses, c_V1, c_V2, c_V3, Comments)) %>%
stats::setNames(c("Bacterial_Sample_Name", "Expt_Date", "Location", "Expt_No", "Depth", "Total_Bacteria", "HNA", "LNA"))
cruise_abundance<- merge(viruses, bacteria, by = c("Location", "Expt_No", "Depth", "Expt_Date")) %>%
select("Bacterial_Sample_Name", "Viral_Sample_Name", "Location", "Expt_No",
"Depth", "Expt_Date", "Total_Bacteria", "HNA", "LNA", "Total_Viruses", "V1", "V2", "V3")
rm(viruses)
rm(bacteria)
}
{
viruses<- NJ2020[which(NJ2020$Staining_Protocol == 'Viruses'),] %>%
select(-c(Staining_Protocol, Depth, c_Bacteria, c_HNA, c_LNA, Comments)) %>%
stats::setNames(c("Viral_Sample_Name", "Expt_Date", "Location", "Expt_No", "Total_Viruses", "V1", "V2", "V3"))
bacteria<- NJ2020[which(NJ2020$Staining_Protocol == 'Bacteria'),] %>%
select(-c(Staining_Protocol, Depth, c_Viruses, c_V1, c_V2, c_V3, Comments)) %>%
stats::setNames(c("Bacterial_Sample_Name", "Expt_Date", "Location", "Expt_No", "Total_Bacteria", "HNA", "LNA"))
NJ2020_abundance<- merge(viruses, bacteria, by = c("Location", "Expt_No", "Expt_Date")) %>%
select("Bacterial_Sample_Name", "Viral_Sample_Name", "Location", "Expt_No",
"Expt_Date", "Total_Bacteria", "HNA", "LNA", "Total_Viruses", "V1", "V2", "V3")
rm(viruses)
rm(bacteria)
}
cruise_abundance$VBR<- cruise_abundance$Total_Viruses/cruise_abundance$Total_Bacteria
NJ2020_abundance$VBR<- NJ2020_abundance$Total_Viruses/NJ2020_abundance$Total_Bacteria
#Adding coordinates and nutrients to the data sets
coordinates <- openxlsx::read.xlsx("Metadata/Metadata_Microbial_Abundances_NJ2020_PE477_PE486.xlsx",
sheet = "Coordinates")
nutrients_ts<- openxlsx::read.xlsx("Metadata/Metadata_Microbial_Abundances_NJ2020_PE477_PE486.xlsx",
sheet = "Nutrients")
limits <- c(TON = 0.01529 / 2,
Nitrite = 0.0393 / 2,
Phosphate = 0.0152 / 2,
Silicate = 0.0711 / 2)
# Replace negatives and zeros
nutrients_ts <- nutrients_ts %>%
mutate(
TON = ifelse(TON <= 0, limits["TON"], TON),
Nitrite = ifelse(Nitrite <= 0, limits["Nitrite"], Nitrite),
Phosphate = ifelse(Phosphate <= 0, limits["Phosphate"], Phosphate),
Silicate = ifelse(Silicate <= 0, limits["Silicate"], Silicate)
) %>%
dplyr::mutate(Nitrate = TON - Nitrite)
# Since there are still negative values in Nitrate. We will repalce them by half of minimum absolute avleus
nutrients_ts <- nutrients_ts %>%
mutate(
Nitrate = ifelse(Nitrate <= 0, min(abs(nutrients_ts$Nitrate))/2, Nitrate)
)
nutrients_ts[nutrients_ts$Location == 'NJ2020',]$Depth <- 1
NJ2020_abundance<- merge(NJ2020_abundance, coordinates[coordinates$Location == 'NJ2020', c(1,3,4)], by = "Location")
cruise_abundance<- merge(cruise_abundance, coordinates[coordinates$Location %in% c('PE477', 'PE486'),]  )
NJ2020_abundance<- merge(NJ2020_abundance, nutrients_ts[nutrients_ts$Location == 'NJ2020',],
by = c("Location", "Expt_No"))
cruise_abundance<- merge(cruise_abundance, nutrients_ts[nutrients_ts$Location %in% c('PE477', 'PE486'),])
#Combine and save as csv Save as a csv file
abundance_abiotic <- rbind(NJ2020_abundance, cruise_abundance)
View(abundance_abiotic)
write.csv(abundance_abiotic, "nj2020_pe477_pe486_bv_abundance_abiotic.csv", row.names = F)
min(abs(nutrients_ts$Nitrate))/2
nutrients_ts$Nitrate
nutrients_ts<- openxlsx::read.xlsx("Metadata/Metadata_Microbial_Abundances_NJ2020_PE477_PE486.xlsx",
sheet = "Nutrients")
limits <- c(TON = 0.01529 / 2,
Nitrite = 0.0393 / 2,
Phosphate = 0.0152 / 2,
Silicate = 0.0711 / 2)
library(flowCore)
fcs_dir <- "C:/Users/hisham.shaikh/OneDrive - UGent/Projects/Microbial_Abundances/Microbial_Abundances_NJ2020_PE477_PE486/Algal_Abundances_NJ2020_PE477_PE486/Raw_Data_Algal_Abundances_NJ2020_PE477_PE486/NJ2020_PE477_PE486_Algal_Files"
fcs_files <- list.files(fcs_dir, pattern = "\\.fcs$", full.names = TRUE)
# Initialize a data frame to store results
measurement_info <- data.frame(File = basename(fcs_files), Date = NA, Acquisition_Duration = NA)
# Loop through each file and extract metadata
for (i in seq_along(fcs_files)) {
tryCatch({
fcs_data <- read.FCS(fcs_files[i], transformation = FALSE, truncate_max_range = FALSE)
metadata <- keyword(fcs_data)  # Extract metadata
# Extract measurement date
measurement_info$Date[i] <- metadata[["$DATE"]]
# Extract and compute measurement duration
if (!is.null(metadata[["$BTIM"]]) && !is.null(metadata[["$ETIM"]])) {
start_time <- as.POSIXct(metadata[["$BTIM"]], format="%H:%M:%S")
end_time <- as.POSIXct(metadata[["$ETIM"]], format="%H:%M:%S")
measurement_info$Acquisition_Duration[i] <- as.numeric(difftime(end_time, start_time, units="mins"))
} else {
measurement_info$Acquisition_Duration[i] <- NA  # Assign NA if time info is missing
}
}, error = function(e) {
message(paste("Skipping file due to error:", fcs_files[i]))  # Print message
measurement_info$Date[i] <- NA
measurement_info$Acquisition_Duration[i] <- NA
})
}
