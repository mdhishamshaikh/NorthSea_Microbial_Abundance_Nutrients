}
}, error = function(e) {
message(paste("Skipping file due to error:", fcs_files[i]))  # Print message
measurement_info$Date[i] <- NA
measurement_info$Acquisition_Duration[i] <- NA
})
}
fcs_dir <- "./Data/NJ2020_PE477_PE486_Algal_Files"
fcs_files <- list.files(fcs_dir, pattern = "\\.fcs$", full.names = TRUE)
# Initialize a data frame to store results
measurement_info <- data.frame(File = basename(fcs_files), Date = NA, Acquisition_Duration = NA)
# Loop through each file and extract metadata
for (i in seq_along(fcs_files)) {
tryCatch({
fcs_data <- read.FCS(fcs_files[i], transformation = FALSE, truncate_max_range = FALSE)
metadata <- keyword(fcs_data)  # Extract metadata
# Extract measurement date
measurement_info$Date[i] <- metadata[["$DATE"]]
# Extract and compute measurement duration
if (!is.null(metadata[["$BTIM"]]) && !is.null(metadata[["$ETIM"]])) {
start_time <- as.POSIXct(metadata[["$BTIM"]], format="%H:%M:%S")
end_time <- as.POSIXct(metadata[["$ETIM"]], format="%H:%M:%S")
measurement_info$Acquisition_Duration[i] <- as.numeric(difftime(end_time, start_time, units="mins"))
} else {
measurement_info$Acquisition_Duration[i] <- NA  # Assign NA if time info is missing
}
}, error = function(e) {
message(paste("Skipping file due to error:", fcs_files[i]))  # Print message
measurement_info$Date[i] <- NA
measurement_info$Acquisition_Duration[i] <- NA
})
}
measurement_info
measurement_info$Date[which(measurement_info$File == "Cruise_NorthSea_PE477_Algae_PE477_7_7m_Bottle3.fcs")] <- "11-MAY-2021"
measurement_info
library(dplyr)
library(tidyr)
measurement_info <- measurement_info %>%
# Extract PE and NJ tags correctly
mutate(Tag = sub(".*_((PE|NJ)\\d+_\\d+_?\\d*).*", "\\1", File)) %>%
# Filter out "Cruise_NorthSea" samples
filter(!grepl("Cruise_NorthSea", File)) %>%
# Separate Tag into appropriate columns
separate(Tag, into = c("Location", "Station_Number", "Depth"), sep = "_", convert = TRUE, fill = "right") %>%
# Ensure Depth column is properly handled (some NJ files may lack a depth value)
mutate(Depth = ifelse(is.na(Depth), "Unknown", as.character(Depth))) %>%
# Replace missing Acquisition_Duration with 10 and round it
mutate(Acquisition_Duration = round(replace_na(Acquisition_Duration, 10)))
measurement_info
measurement_info
measurement_info <- measurement_info %>%
mutate(Tag = sub(".*_(PE\\d+_\\d+_\\d+).*", "\\1", File)) %>%
filter(!grepl("Cruise_NorthSea", Tag))%>%
separate(Tag, into = c("Location", "Station_Number", "Depth"), sep = "_", convert = TRUE) %>%
mutate(Acquisition_Duration = round(replace_na(Acquisition_Duration, 10)))
measurement_info
# Initialize a data frame to store results
measurement_info <- data.frame(File = basename(fcs_files), Date = NA, Acquisition_Duration = NA)
# Loop through each file and extract metadata
for (i in seq_along(fcs_files)) {
tryCatch({
fcs_data <- read.FCS(fcs_files[i], transformation = FALSE, truncate_max_range = FALSE)
metadata <- keyword(fcs_data)  # Extract metadata
# Extract measurement date
measurement_info$Date[i] <- metadata[["$DATE"]]
# Extract and compute measurement duration
if (!is.null(metadata[["$BTIM"]]) && !is.null(metadata[["$ETIM"]])) {
start_time <- as.POSIXct(metadata[["$BTIM"]], format="%H:%M:%S")
end_time <- as.POSIXct(metadata[["$ETIM"]], format="%H:%M:%S")
measurement_info$Acquisition_Duration[i] <- as.numeric(difftime(end_time, start_time, units="mins"))
} else {
measurement_info$Acquisition_Duration[i] <- NA  # Assign NA if time info is missing
}
}, error = function(e) {
message(paste("Skipping file due to error:", fcs_files[i]))  # Print message
measurement_info$Date[i] <- NA
measurement_info$Acquisition_Duration[i] <- NA
})
}
measurement_info$Date[which(measurement_info$File == "Cruise_NorthSea_PE477_Algae_PE477_7_7m_Bottle3.fcs")] <- "11-MAY-2021"
measurement_info <- measurement_info %>%
mutate(Tag = sub(".*_(PE\\d+_\\d+_\\d+).*", "\\1", File)) %>%
filter(!grepl("Cruise_NorthSea", Tag))%>%
separate(Tag, into = c("Location", "Station_Number", "Depth"), sep = "_", convert = TRUE) %>%
mutate(Acquisition_Duration = round(replace_na(Acquisition_Duration, 10)))
measurement_info
measurement_info[42:48]
measurement_info[42:48,]
measurement_info[42:48,]$Station_Number
measurement_info[42:48,]$Station_Number <- 1:7
measurement_info[42:48,]$Station_Number
measurement_info[42:48,]$Depth <- 1
measurement_info
fcs_express_phyto<- readxl::read_xlsx("./Data/NJ2020_PE477_PE486_algal_abundance_with_total_FCSExpress5_Output.xlsx")
View(fcs_express_phyto)
# As all the gates were added as columns and not rows, I will slice chunks of 7 columns and add them as rows
num_chunks <- ncol(fcs_express_phyto) / 7
stacked_data <- lapply(1:num_chunks, function(i) {
# Select the 8 columns for this chunk
chunk <- fcs_express_phyto[, ((i - 1) * 7 + 1):(i * 7)]
# Rename the columns uniformly
colnames(chunk) <- c("Overlay", "Filename", "Overlay_Gate", "Gate",
"Total_Events", "percent_gated_cells", "percent_all_cells")
return(chunk)
})
phyto_counts <- do.call(rbind, stacked_data)
View(phyto_counts)
View(fcs_express_phyto)
# As all the gates were added as columns and not rows, I will slice chunks of 7 columns and add them as rows
num_chunks <- ncol(fcs_express_phyto) / 8
stacked_data <- lapply(1:num_chunks, function(i) {
# Select the 8 columns for this chunk
chunk <- fcs_express_phyto[, ((i - 1) * 7 + 1):(i * 7)]
# Rename the columns uniformly
colnames(chunk) <- c("Overlay", "Filename", "Gate", "SSCA_geometric_mean", "FL_geometric_mean"
"Total_Events", "percent_gated_cells", "percent_all_cells")
stacked_data <- lapply(1:num_chunks, function(i) {
# Select the 8 columns for this chunk
chunk <- fcs_express_phyto[, ((i - 1) * 7 + 1):(i * 7)]
# Rename the columns uniformly
colnames(chunk) <- c("Overlay", "Filename", "Gate", "SSCA_geometric_mean", "FL_geometric_mean",
"Total_Events", "percent_gated_cells", "percent_all_cells")
return(chunk)
})
phyto_counts <- do.call(rbind, stacked_data)
View(phyto_counts)
# Rename the columns uniformly
colnames(chunk) <- c("Overlay", "Filename", "Gate", "Total_Events",
"SSCA_geometric_mean", "FL_geometric_mean",
"percent_gated_cells", "percent_all_cells")
# As all the gates were added as columns and not rows, I will slice chunks of 7 columns and add them as rows
num_chunks <- ncol(fcs_express_phyto) / 8
stacked_data <- lapply(1:num_chunks, function(i) {
# Select the 8 columns for this chunk
chunk <- fcs_express_phyto[, ((i - 1) * 7 + 1):(i * 7)]
# Rename the columns uniformly
colnames(chunk) <- c("Overlay", "Filename", "Gate", "Total_Events",
"SSCA_geometric_mean", "FL_geometric_mean",
"percent_gated_cells", "percent_all_cells")
return(chunk)
})
phyto_counts <- do.call(rbind, stacked_data)
phyto_counts <- phyto_counts %>%
mutate(Tag = sub(".*_(PE\\d+_\\d+_\\d+).*", "\\1", Filename)) %>%
dplyr::filter(!grepl("Cruise_NorthSea", Tag)) %>%
separate(Tag, into = c("Location", "Station_Number", "Depth"), sep = "_", convert = TRUE) %>%
mutate(
Overlay_Gate = gsub("Gate ", "", Overlay_Gate),
Gate = gsub("Gate ", "", Gate),
Gate = ifelse(tolower(Gate) == "none", "0", Gate)  # Replace "None" with "O"
) %>%
mutate(Location_Station = paste(Location, Station_Number, sep = "_")) %>%
dplyr::filter(Depth %in% c(7, 15, 30)) %>%
#filter(!Location_Station %in% c("PE477_7", "PE486_8")) %>%
dplyr::filter(!grepl("SSC425", Filename)) %>%
dplyr::filter(!grepl("8m", Filename)) %>%
dplyr::filter(!grepl("Bottle11", Filename))
phyto_counts <- do.call(rbind, stacked_data)
View(phyto_counts)
# As all the gates were added as columns and not rows, I will slice chunks of 7 columns and add them as rows
num_chunks <- ncol(fcs_express_phyto) / 8
stacked_data <- lapply(1:num_chunks, function(i) {
# Select the 8 columns for this chunk
chunk <- fcs_express_phyto[, ((i - 1) * 8 + 1):(i * 8)]
# Rename the columns uniformly
colnames(chunk) <- c("Overlay", "Filename", "Gate", "Total_Events",
"SSCA_geometric_mean", "FL_geometric_mean",
"percent_gated_cells", "percent_all_cells")
return(chunk)
})
phyto_counts <- do.call(rbind, stacked_data)
View(phyto_counts)
measurement_info
phyto_counts <- phyto_counts %>%
left_join(measurement_info %>% select(Location, Station_Number, Depth, Acquisition_Duration),
by = c("File")) %>%
# Add Flow Rate based on Location
mutate(Flow_Rate = case_when(
Location == "NJ" ~ 129,
Location == "PE477" ~ 129,   # Flow rate for PE477
Location == "PE486" ~ 107,   # Flow rate for PE486
TRUE ~ NA_real_            # Assign NA if Location is neither
)) %>%
# Calculate Cells per mL
mutate(cells_per_mL = Total_Events / (Acquisition_Duration * Flow_Rate * 1e-3))
phyto_counts
phyto_counts <- phyto_counts %>%
left_join(measurement_info %>% select(Location, Station_Number, Depth, Acquisition_Duration),
by = c("Filename" = "File")) %>%
# Add Flow Rate based on Location
mutate(Flow_Rate = case_when(
Location == "NJ" ~ 129,
Location == "PE477" ~ 129,   # Flow rate for PE477
Location == "PE486" ~ 107,   # Flow rate for PE486
TRUE ~ NA_real_            # Assign NA if Location is neither
)) %>%
# Calculate Cells per mL
mutate(cells_per_mL = Total_Events / (Acquisition_Duration * Flow_Rate * 1e-3))
phyto_counts <- phyto_counts %>%
left_join(measurement_info %>% select(Location, Station_Number, Depth, Acquisition_Duration),
by = c("File" = "Filename")) %>%
# Add Flow Rate based on Location
mutate(Flow_Rate = case_when(
Location == "NJ" ~ 129,
Location == "PE477" ~ 129,   # Flow rate for PE477
Location == "PE486" ~ 107,   # Flow rate for PE486
TRUE ~ NA_real_            # Assign NA if Location is neither
)) %>%
# Calculate Cells per mL
mutate(cells_per_mL = Total_Events / (Acquisition_Duration * Flow_Rate * 1e-3))
phyto_counts
setdiff(phyto_counts$Filename, measurement_info$File)
View(measurement_info)
View(phyto_counts)
141/3
phyto_counts <- phyto_counts %>%
mutate(Filename = str_remove(Filename, " compensated$")) %>%
left_join(measurement_info %>%
select(File, Location, Station_Number, Depth, Acquisition_Duration),
by = c("Filename" = "File")) %>%
# Add Flow Rate based on Location
mutate(Flow_Rate = case_when(
Location == "NJ" ~ 129,
Location == "PE477" ~ 129,   # Flow rate for PE477
Location == "PE486" ~ 107,   # Flow rate for PE486
TRUE ~ NA_real_            # Assign NA if Location is neither
)) %>%
# Calculate Cells per mL
mutate(cells_per_mL = Total_Events / (Acquisition_Duration * Flow_Rate * 1e-3))
write.csv(phyto_counts, file = "./phytoplankton_counts_nj2020_pe477_pe486.csv", row.names= F)
View(phyto_counts)
fcs_express_phyto<- readxl::read_xlsx("./Data/PE477_PE486_algal_abundance_with_total_FCSExpress5_Output.xlsx")
View(fcs_express_phyto)
# As all the gates were added as columns and not rows, I will slice chunks of 7 columns and add them as rows
num_chunks <- ncol(fcs_express_phyto) / 7
stacked_data <- lapply(1:num_chunks, function(i) {
# Select the 8 columns for this chunk
chunk <- fcs_express_phyto[, ((i - 1) * 7 + 1):(i * 7)]
# Rename the columns uniformly
colnames(chunk) <- c("Overlay", "Filename", "Overlay_Gate", "Gate",
"Total_Events", "percent_gated_cells", "percent_all_cells")
return(chunk)
})
phyto_counts <- do.call(rbind, stacked_data)
phyto_counts <- phyto_counts %>%
mutate(Tag = sub(".*_(PE\\d+_\\d+_\\d+).*", "\\1", Filename)) %>%
dplyr::filter(!grepl("Cruise_NorthSea", Tag)) %>%
separate(Tag, into = c("Location", "Station_Number", "Depth"), sep = "_", convert = TRUE) %>%
mutate(
Overlay_Gate = gsub("Gate ", "", Overlay_Gate),
Gate = gsub("Gate ", "", Gate),
Gate = ifelse(tolower(Gate) == "none", "0", Gate)  # Replace "None" with "O"
) %>%
mutate(Location_Station = paste(Location, Station_Number, sep = "_")) %>%
dplyr::filter(Depth %in% c(7, 15, 30)) %>%
#filter(!Location_Station %in% c("PE477_7", "PE486_8")) %>%
dplyr::filter(!grepl("SSC425", Filename)) %>%
dplyr::filter(!grepl("8m", Filename)) %>%
dplyr::filter(!grepl("Bottle11", Filename))
View(phyto_counts)
fcs_dir <- "./Data/NJ2020_PE477_PE486_Algal_Files"
fcs_files <- list.files(fcs_dir, pattern = "\\.fcs$", full.names = TRUE)
# Initialize a data frame to store results
measurement_info <- data.frame(File = basename(fcs_files), Date = NA, Acquisition_Duration = NA)
# Loop through each file and extract metadata
for (i in seq_along(fcs_files)) {
tryCatch({
fcs_data <- read.FCS(fcs_files[i], transformation = FALSE, truncate_max_range = FALSE)
metadata <- keyword(fcs_data)  # Extract metadata
# Extract measurement date
measurement_info$Date[i] <- metadata[["$DATE"]]
# Extract and compute measurement duration
if (!is.null(metadata[["$BTIM"]]) && !is.null(metadata[["$ETIM"]])) {
start_time <- as.POSIXct(metadata[["$BTIM"]], format="%H:%M:%S")
end_time <- as.POSIXct(metadata[["$ETIM"]], format="%H:%M:%S")
measurement_info$Acquisition_Duration[i] <- as.numeric(difftime(end_time, start_time, units="mins"))
} else {
measurement_info$Acquisition_Duration[i] <- NA  # Assign NA if time info is missing
}
}, error = function(e) {
message(paste("Skipping file due to error:", fcs_files[i]))  # Print message
measurement_info$Date[i] <- NA
measurement_info$Acquisition_Duration[i] <- NA
})
}
measurement_info$Date[which(measurement_info$File == "Cruise_NorthSea_PE477_Algae_PE477_7_7m_Bottle3.fcs")] <- "11-MAY-2021"
measurement_info <- measurement_info %>%
mutate(Tag = sub(".*_(PE\\d+_\\d+_\\d+).*", "\\1", File)) %>%
filter(!grepl("Cruise_NorthSea", Tag))%>%
separate(Tag, into = c("Location", "Station_Number", "Depth"), sep = "_", convert = TRUE) %>%
mutate(Acquisition_Duration = round(replace_na(Acquisition_Duration, 10)))
measurement_info
measurement_info[42:48,]$Station_Number <- 1:7
measurement_info[42:48,]$Depth <- 1
fcs_express_phyto<- readxl::read_xlsx("./Data/NJ2020_PE477_PE486_algal_abundance_with_total_FCSExpress5_Output.xlsx")
# As all the gates were added as columns and not rows, I will slice chunks of 7 columns and add them as rows
num_chunks <- ncol(fcs_express_phyto) / 8
stacked_data <- lapply(1:num_chunks, function(i) {
# Select the 8 columns for this chunk
chunk <- fcs_express_phyto[, ((i - 1) * 8 + 1):(i * 8)]
# Rename the columns uniformly
colnames(chunk) <- c("Overlay", "Filename", "Gate", "Total_Events",
"SSCA_geometric_mean", "FL_geometric_mean",
"percent_gated_cells", "percent_all_cells")
return(chunk)
})
phyto_counts <- do.call(rbind, stacked_data)
phyto_counts2 <- do.call(rbind, stacked_data)
fcs_express_phyto<- readxl::read_xlsx("./Data/PE477_PE486_algal_abundance_with_total_FCSExpress5_Output.xlsx")
# As all the gates were added as columns and not rows, I will slice chunks of 7 columns and add them as rows
num_chunks <- ncol(fcs_express_phyto) / 7
stacked_data <- lapply(1:num_chunks, function(i) {
# Select the 8 columns for this chunk
chunk <- fcs_express_phyto[, ((i - 1) * 7 + 1):(i * 7)]
# Rename the columns uniformly
colnames(chunk) <- c("Overlay", "Filename", "Overlay_Gate", "Gate",
"Total_Events", "percent_gated_cells", "percent_all_cells")
return(chunk)
})
phyto_counts <- do.call(rbind, stacked_data)
phyto_counts <- phyto_counts %>%
mutate(Tag = sub(".*_(PE\\d+_\\d+_\\d+).*", "\\1", Filename)) %>%
dplyr::filter(!grepl("Cruise_NorthSea", Tag)) %>%
separate(Tag, into = c("Location", "Station_Number", "Depth"), sep = "_", convert = TRUE) %>%
mutate(
Overlay_Gate = gsub("Gate ", "", Overlay_Gate),
Gate = gsub("Gate ", "", Gate),
Gate = ifelse(tolower(Gate) == "none", "0", Gate)  # Replace "None" with "O"
) %>%
mutate(Location_Station = paste(Location, Station_Number, sep = "_")) %>%
dplyr::filter(Depth %in% c(7, 15, 30)) %>%
#filter(!Location_Station %in% c("PE477_7", "PE486_8")) %>%
dplyr::filter(!grepl("SSC425", Filename)) %>%
dplyr::filter(!grepl("8m", Filename)) %>%
dplyr::filter(!grepl("Bottle11", Filename))
{library(flowCore)
fcs_dir <- "C:/Users/hisham.shaikh/OneDrive - UGent/Projects/Microbial_Abundances/Microbial_Abundances_NJ2020_PE477_PE486/Algal_Abundances_NJ2020_PE477_PE486/Raw_Data_Algal_Abundances_NJ2020_PE477_PE486/PE477_PE486_Algal_Files"
fcs_files <- list.files(fcs_dir, pattern = "\\.fcs$", full.names = TRUE)
# Initialize a data frame to store results
measurement_info <- data.frame(File = basename(fcs_files), Date = NA, Acquisition_Duration = NA)
# Loop through each file and extract metadata
for (i in seq_along(fcs_files)) {
tryCatch({
fcs_data <- read.FCS(fcs_files[i], transformation = FALSE, truncate_max_range = FALSE)
metadata <- keyword(fcs_data)  # Extract metadata
# Extract measurement date
measurement_info$Date[i] <- metadata[["$DATE"]]
# Extract and compute measurement duration
if (!is.null(metadata[["$BTIM"]]) && !is.null(metadata[["$ETIM"]])) {
start_time <- as.POSIXct(metadata[["$BTIM"]], format="%H:%M:%S")
end_time <- as.POSIXct(metadata[["$ETIM"]], format="%H:%M:%S")
measurement_info$Acquisition_Duration[i] <- as.numeric(difftime(end_time, start_time, units="mins"))
} else {
measurement_info$Acquisition_Duration[i] <- NA  # Assign NA if time info is missing
}
}, error = function(e) {
message(paste("Skipping file due to error:", fcs_files[i]))  # Print message
measurement_info$Date[i] <- NA
measurement_info$Acquisition_Duration[i] <- NA
})
}
measurement_info <- measurement_info %>%
mutate(Tag = sub(".*_(PE\\d+_\\d+_\\d+).*", "\\1", File)) %>%
dplyr::filter(!grepl("Cruise_NorthSea", Tag))%>%
separate(Tag, into = c("Location", "Station_Number", "Depth"), sep = "_", convert = TRUE) %>%
mutate(Acquisition_Duration = round(replace_na(Acquisition_Duration, 10)))
}
measurement_info <- measurement_info %>%
mutate(Date = case_when(
grepl("Cruise_NorthSea_PE477_Algae_PE477_7_7m_Bottle3.fcs", File) ~ "11-MAY-2021",
!is.na(Date) ~ Date,  # Preserve existing Date values
TRUE ~ NA_character_   # Keep NA for others without modification
))
measurement_info <- measurement_info  %>%
mutate(Station_Number = as.integer(Station_Number),
Depth = as.integer(Depth))%>%
na.omit()
phyto_counts <- phyto_counts %>%
left_join(measurement_info %>% select(Location, Station_Number, Depth, Acquisition_Duration),
by = c("Location", "Station_Number", "Depth")) %>%
# Add Flow Rate based on Location
mutate(Flow_Rate = case_when(
Location == "PE477" ~ 129,   # Flow rate for PE477
Location == "PE486" ~ 107,   # Flow rate for PE486
TRUE ~ NA_real_            # Assign NA if Location is neither
)) %>%
# Calculate Cells per mL
mutate(cells_per_mL = Total_Events / (Acquisition_Duration * Flow_Rate * 1e-3))
fcs_express_phyto<- readxl::read_xlsx("./Data/NJ2020_PE477_PE486_algal_abundance_with_total_FCSExpress5_Output.xlsx")
# As all the gates were added as columns and not rows, I will slice chunks of 7 columns and add them as rows
num_chunks <- ncol(fcs_express_phyto) / 8
stacked_data <- lapply(1:num_chunks, function(i) {
# Select the 8 columns for this chunk
chunk <- fcs_express_phyto[, ((i - 1) * 8 + 1):(i * 8)]
# Rename the columns uniformly
colnames(chunk) <- c("Overlay", "Filename", "Gate", "Total_Events",
"SSCA_geometric_mean", "FL_geometric_mean",
"percent_gated_cells", "percent_all_cells")
return(chunk)
})
phyto_counts2 <- do.call(rbind, stacked_data)
fcs_dir <- "./Data/NJ2020_PE477_PE486_Algal_Files"
fcs_files <- list.files(fcs_dir, pattern = "\\.fcs$", full.names = TRUE)
# Initialize a data frame to store results
measurement_info <- data.frame(File = basename(fcs_files), Date = NA, Acquisition_Duration = NA)
# Loop through each file and extract metadata
for (i in seq_along(fcs_files)) {
tryCatch({
fcs_data <- read.FCS(fcs_files[i], transformation = FALSE, truncate_max_range = FALSE)
metadata <- keyword(fcs_data)  # Extract metadata
# Extract measurement date
measurement_info$Date[i] <- metadata[["$DATE"]]
# Extract and compute measurement duration
if (!is.null(metadata[["$BTIM"]]) && !is.null(metadata[["$ETIM"]])) {
start_time <- as.POSIXct(metadata[["$BTIM"]], format="%H:%M:%S")
end_time <- as.POSIXct(metadata[["$ETIM"]], format="%H:%M:%S")
measurement_info$Acquisition_Duration[i] <- as.numeric(difftime(end_time, start_time, units="mins"))
} else {
measurement_info$Acquisition_Duration[i] <- NA  # Assign NA if time info is missing
}
}, error = function(e) {
message(paste("Skipping file due to error:", fcs_files[i]))  # Print message
measurement_info$Date[i] <- NA
measurement_info$Acquisition_Duration[i] <- NA
})
}
measurement_info$Date[which(measurement_info$File == "Cruise_NorthSea_PE477_Algae_PE477_7_7m_Bottle3.fcs")] <- "11-MAY-2021"
measurement_info <- measurement_info %>%
mutate(Tag = sub(".*_(PE\\d+_\\d+_\\d+).*", "\\1", File)) %>%
filter(!grepl("Cruise_NorthSea", Tag))%>%
separate(Tag, into = c("Location", "Station_Number", "Depth"), sep = "_", convert = TRUE) %>%
mutate(Acquisition_Duration = round(replace_na(Acquisition_Duration, 10)))
measurement_info
measurement_info[42:48,]$Station_Number <- 1:7
measurement_info[42:48,]$Depth <- 1
phyto_counts2 <- phyto_counts2 %>%
mutate(Filename = str_remove(Filename, " compensated$")) %>%
left_join(measurement_info %>%
select(File, Location, Station_Number, Depth, Acquisition_Duration),
by = c("Filename" = "File")) %>%
# Add Flow Rate based on Location
mutate(Flow_Rate = case_when(
Location == "NJ" ~ 129,
Location == "PE477" ~ 129,   # Flow rate for PE477
Location == "PE486" ~ 107,   # Flow rate for PE486
TRUE ~ NA_real_            # Assign NA if Location is neither
)) %>%
# Calculate Cells per mL
mutate(cells_per_mL = Total_Events / (Acquisition_Duration * Flow_Rate * 1e-3))
View(phyto_counts2)
fcs_express_phyto<- readxl::read_xlsx("./Data/NJ2020_PE477_PE486_algal_abundance_with_total_FCSExpress5_Output.xlsx")
# As all the gates were added as columns and not rows, I will slice chunks of 7 columns and add them as rows
num_chunks <- ncol(fcs_express_phyto) / 8
stacked_data <- lapply(1:num_chunks, function(i) {
# Select the 8 columns for this chunk
chunk <- fcs_express_phyto[, ((i - 1) * 8 + 1):(i * 8)]
# Rename the columns uniformly
colnames(chunk) <- c("Overlay", "Filename", "Gate", "Total_Events",
"SSCA_geometric_mean", "FL_geometric_mean",
"percent_gated_cells", "percent_all_cells")
return(chunk)
})
phyto_counts2 <- do.call(rbind, stacked_data)
fcs_dir <- "./Data/NJ2020_PE477_PE486_Algal_Files"
fcs_files <- list.files(fcs_dir, pattern = "\\.fcs$", full.names = TRUE)
# Initialize a data frame to store results
measurement_info <- data.frame(File = basename(fcs_files), Date = NA, Acquisition_Duration = NA)
# Loop through each file and extract metadata
for (i in seq_along(fcs_files)) {
tryCatch({
fcs_data <- read.FCS(fcs_files[i], transformation = FALSE, truncate_max_range = FALSE)
metadata <- keyword(fcs_data)  # Extract metadata
# Extract measurement date
measurement_info$Date[i] <- metadata[["$DATE"]]
# Extract and compute measurement duration
if (!is.null(metadata[["$BTIM"]]) && !is.null(metadata[["$ETIM"]])) {
start_time <- as.POSIXct(metadata[["$BTIM"]], format="%H:%M:%S")
end_time <- as.POSIXct(metadata[["$ETIM"]], format="%H:%M:%S")
measurement_info$Acquisition_Duration[i] <- as.numeric(difftime(end_time, start_time, units="mins"))
} else {
measurement_info$Acquisition_Duration[i] <- NA  # Assign NA if time info is missing
}
}, error = function(e) {
message(paste("Skipping file due to error:", fcs_files[i]))  # Print message
measurement_info$Date[i] <- NA
measurement_info$Acquisition_Duration[i] <- NA
})
}
measurement_info$Date[which(measurement_info$File == "Cruise_NorthSea_PE477_Algae_PE477_7_7m_Bottle3.fcs")] <- "11-MAY-2021"
measurement_info <- measurement_info %>%
mutate(Tag = sub(".*_(PE\\d+_\\d+_\\d+).*", "\\1", File)) %>%
filter(!grepl("Cruise_NorthSea", Tag))%>%
separate(Tag, into = c("Location", "Station_Number", "Depth"), sep = "_", convert = TRUE) %>%
mutate(Acquisition_Duration = round(replace_na(Acquisition_Duration, 10)))
measurement_info
measurement_info[42:48,]$Station_Number <- 1:7
measurement_info[42:48,]$Depth <- 1
phyto_counts2 <- phyto_counts2 %>%
mutate(Filename = str_remove(Filename, " compensated$")) %>%
left_join(measurement_info %>%
select(File, Location, Station_Number, Depth, Acquisition_Duration),
by = c("Filename" = "File")) %>%
# Add Flow Rate based on Location
mutate(Flow_Rate = case_when(
Location == "NJ" ~ 129,
Location == "PE477" ~ 129,   # Flow rate for PE477
Location == "PE486" ~ 107,   # Flow rate for PE486
TRUE ~ NA_real_            # Assign NA if Location is neither
)) %>%
# Calculate Cells per mL
mutate(cells_per_mL = Total_Events / (Acquisition_Duration * Flow_Rate * 1e-3))
write.csv(phyto_counts2, file = "./phytoplankton_counts_nj2020_pe477_pe486.csv", row.names= F)
