measurement_info <- measurement_info %>%
mutate(Tag = sub(".*_(PE\\d+_\\d+_\\d+).*", "\\1", File)) %>%
filter(!grepl("Cruise_NorthSea", Tag))%>%
separate(Tag, into = c("Location", "Station_Number", "Depth"), sep = "_", convert = TRUE)
measurement_info
# Initialize a data frame to store results
measurement_info <- data.frame(File = basename(fcs_files), Date = NA, Acquisition_Duration = NA)
measurement_info
# Loop through each file and extract metadata
for (i in seq_along(fcs_files)) {
tryCatch({
fcs_data <- read.FCS(fcs_files[i], transformation = FALSE, truncate_max_range = FALSE)
metadata <- keyword(fcs_data)  # Extract metadata
# Extract measurement date
measurement_info$Date[i] <- metadata[["$DATE"]]
# Extract and compute measurement duration
if (!is.null(metadata[["$BTIM"]]) && !is.null(metadata[["$ETIM"]])) {
start_time <- as.POSIXct(metadata[["$BTIM"]], format="%H:%M:%S")
end_time <- as.POSIXct(metadata[["$ETIM"]], format="%H:%M:%S")
measurement_info$Acquisition_Duration[i] <- as.numeric(difftime(end_time, start_time, units="mins"))
} else {
measurement_info$Acquisition_Duration[i] <- NA  # Assign NA if time info is missing
}
}, error = function(e) {
message(paste("Skipping file due to error:", fcs_files[i]))  # Print message
measurement_info$Date[i] <- NA
measurement_info$Acquisition_Duration[i] <- NA
})
}
measurement_info
measurement_info <- measurement_info %>%
mutate(Tag = sub(".*_(PE\\d+_\\d+_\\d+).*", "\\1", File)) %>%
filter(!grepl("Cruise_NorthSea", Tag))%>%
separate(Tag, into = c("Location", "Station_Number", "Depth"), sep = "_", convert = TRUE)
measurement_info
measurement_info <- measurement_info %>%
mutate(Tag = sub(".*_(PE\\d+_\\d+_\\d+).*", "\\1", File)) %>%
filter(!grepl("Cruise_NorthSea", Tag))%>%
separate(Tag, into = c("Location", "Station_Number", "Depth"), sep = "_", convert = TRUE) %>%
mutate(Acquisition_Duration = replace_na(Acquisition_Duration, 10))
measurement_info
measurement_info <- measurement_info %>%
mutate(Tag = sub(".*_(PE\\d+_\\d+_\\d+).*", "\\1", File)) %>%
filter(!grepl("Cruise_NorthSea", Tag))%>%
separate(Tag, into = c("Location", "Station_Number", "Depth"), sep = "_", convert = TRUE) %>%
mutate(Acquisition_Duration = round(replace_na(Acquisition_Duration, 10)))
measurement_info <- measurement_info %>%
mutate(Tag = sub(".*_(PE\\d+_\\d+_\\d+).*", "\\1", File)) %>%
filter(!grepl("Cruise_NorthSea", Tag))%>%
separate(Tag, into = c("Location", "Station_Number", "Depth"), sep = "_", convert = TRUE) %>%
mutate(Acquisition_Duration = round(replace_na(Acquisition_Duration, 10), 1))
measurement_info <- measurement_info %>%
mutate(Tag = sub(".*_(PE\\d+_\\d+_\\d+).*", "\\1", File)) %>%
filter(!grepl("Cruise_NorthSea", Tag))%>%
separate(Tag, into = c("Location", "Station_Number", "Depth"), sep = "_", convert = TRUE) %>%
mutate(Acquisition_Duration = round(replace_na(Acquisition_Duration, 10), 1))
# Initialize a data frame to store results
measurement_info <- data.frame(File = basename(fcs_files), Date = NA, Acquisition_Duration = NA)
# Loop through each file and extract metadata
for (i in seq_along(fcs_files)) {
tryCatch({
fcs_data <- read.FCS(fcs_files[i], transformation = FALSE, truncate_max_range = FALSE)
metadata <- keyword(fcs_data)  # Extract metadata
# Extract measurement date
measurement_info$Date[i] <- metadata[["$DATE"]]
# Extract and compute measurement duration
if (!is.null(metadata[["$BTIM"]]) && !is.null(metadata[["$ETIM"]])) {
start_time <- as.POSIXct(metadata[["$BTIM"]], format="%H:%M:%S")
end_time <- as.POSIXct(metadata[["$ETIM"]], format="%H:%M:%S")
measurement_info$Acquisition_Duration[i] <- as.numeric(difftime(end_time, start_time, units="mins"))
} else {
measurement_info$Acquisition_Duration[i] <- NA  # Assign NA if time info is missing
}
}, error = function(e) {
message(paste("Skipping file due to error:", fcs_files[i]))  # Print message
measurement_info$Date[i] <- NA
measurement_info$Acquisition_Duration[i] <- NA
})
}
measurement_info <- measurement_info %>%
mutate(Tag = sub(".*_(PE\\d+_\\d+_\\d+).*", "\\1", File)) %>%
filter(!grepl("Cruise_NorthSea", Tag))%>%
separate(Tag, into = c("Location", "Station_Number", "Depth"), sep = "_", convert = TRUE) %>%
mutate(Acquisition_Duration = round(replace_na(Acquisition_Duration, 10), 1))
View(phyto_counts)
head(phyto_counts)
head(measurement_info)
phyto_counts <- phyto_counts %>%
left_join(measurement_info %>% select(Location, Station_Number, Depth, Acquisition_Duration),
by = c("Location", "Station_Number", "Depth")) %>%
# Add Flow Rate based on Location
mutate(Flow_Rate = case_when(
Location == "PE477" ~ 129,   # Flow rate for PE477
Location == "PE486" ~ 107,   # Flow rate for PE486
TRUE ~ NA_real_            # Assign NA if Location is neither
)) %>%
# Calculate Cells per mL
mutate(cells_per_ml = Total_Events / (Acquisition_Duration * Flow_Rate * 1e-3))
View(phyto_counts)
write.csv(phyto_counts, file = "./phytoplankton_counts_pe477_pe486.csv", row.names= F)
# Create the plot with facets for Depth and Gate
ggplot(phyto_counts, aes(x = Location_Station, y = cells_per_ml, fill = Location_Station)) +
geom_bar(stat = "identity") + # Bar plot with count of events
facet_grid(Depth ~ Gate, scales = "fixed", switch = "both") + # Facets for Depth and Gate
scale_fill_manual(values = custom_palette) +
labs(
title = "Distribution of Events Across Location_Station",
x = "Location_Station",
y = "Number of Events"
) +
theme_bw() +
theme(
strip.background = element_rect(fill = "lightgray", colour = "black"),
strip.text = element_text(size = 10, face = "bold"),
axis.text.x = element_text(angle = 90)
)
ggsave("phyto_abundance_facet_plot_depths.svg", width = 24, height = 8, dpi = 800)
fcs_express_phyto<- readxl::read_xlsx("./Data/PE477_PE486_algal_abundance_FCSExpress5_Output.xlsx")
# As all the gates were added as columns and not rows, I will slice chunks of 7 columns and add them as rows
num_chunks <- ncol(fcs_express_phyto) / 7
stacked_data <- lapply(1:num_chunks, function(i) {
# Select the 8 columns for this chunk
chunk <- fcs_express_phyto[, ((i - 1) * 7 + 1):(i * 7)]
# Rename the columns uniformly
colnames(chunk) <- c("Overlay", "Filename", "Overlay_Gate", "Gate",
"Total_Events", "percent_gated_cells", "percent_all_cells")
return(chunk)
})
fcs_express_phyto<- readxl::read_xlsx("./Data/PE477_PE486_algal_abundance_FCSExpress5_Output.xlsx")
# As all the gates were added as columns and not rows, I will slice chunks of 7 columns and add them as rows
num_chunks <- ncol(fcs_express_phyto) / 7
stacked_data <- lapply(1:num_chunks, function(i) {
# Select the 8 columns for this chunk
chunk <- fcs_express_phyto[, ((i - 1) * 7 + 1):(i * 7)]
# Rename the columns uniformly
colnames(chunk) <- c("Overlay", "Filename", "Overlay_Gate", "Gate",
"Total_Events", "percent_gated_cells", "percent_all_cells")
return(chunk)
})
phyto_counts <- do.call(rbind, stacked_data)
phyto_counts <- phyto_counts %>%
mutate(Tag = sub(".*_(PE\\d+_\\d+_\\d+).*", "\\1", Filename)) %>%
filter(!grepl("Cruise_NorthSea", Tag)) %>%
separate(Tag, into = c("Location", "Station_Number", "Depth"), sep = "_", convert = TRUE) %>%
mutate(
Overlay_Gate = gsub("Gate ", "", Overlay_Gate),
Gate = gsub("Gate ", "", Gate),
Gate = ifelse(tolower(Gate) == "none", "0", Gate)  # Replace "None" with "O"
) %>%
mutate(Location_Station = paste(Location, Station_Number, sep = "_")) %>%
filter(Depth %in% c(7, 15, 30)) %>%
#filter(!Location_Station %in% c("PE477_7", "PE486_8")) %>%
filter(!grepl("SSC425", Filename)) %>%
filter(!grepl("8m", Filename)) %>%
filter(!grepl("Bottle11", Filename))
{library(flowCore)
fcs_dir <- "C:/Users/hisham.shaikh/OneDrive - UGent/Projects/Microbial_Abundances/Microbial_Abundances_NJ2020_PE477_PE486/Algal_Abundances_NJ2020_PE477_PE486/Raw_Data_Algal_Abundances_NJ2020_PE477_PE486/PE477_PE486_Algal_Files"
fcs_files <- list.files(fcs_dir, pattern = "\\.fcs$", full.names = TRUE)
# Initialize a data frame to store results
measurement_info <- data.frame(File = basename(fcs_files), Date = NA, Acquisition_Duration = NA)
# Loop through each file and extract metadata
for (i in seq_along(fcs_files)) {
tryCatch({
fcs_data <- read.FCS(fcs_files[i], transformation = FALSE, truncate_max_range = FALSE)
metadata <- keyword(fcs_data)  # Extract metadata
# Extract measurement date
measurement_info$Date[i] <- metadata[["$DATE"]]
# Extract and compute measurement duration
if (!is.null(metadata[["$BTIM"]]) && !is.null(metadata[["$ETIM"]])) {
start_time <- as.POSIXct(metadata[["$BTIM"]], format="%H:%M:%S")
end_time <- as.POSIXct(metadata[["$ETIM"]], format="%H:%M:%S")
measurement_info$Acquisition_Duration[i] <- as.numeric(difftime(end_time, start_time, units="mins"))
} else {
measurement_info$Acquisition_Duration[i] <- NA  # Assign NA if time info is missing
}
}, error = function(e) {
message(paste("Skipping file due to error:", fcs_files[i]))  # Print message
measurement_info$Date[i] <- NA
measurement_info$Acquisition_Duration[i] <- NA
})
}
measurement_info <- measurement_info %>%
mutate(Tag = sub(".*_(PE\\d+_\\d+_\\d+).*", "\\1", File)) %>%
filter(!grepl("Cruise_NorthSea", Tag))%>%
separate(Tag, into = c("Location", "Station_Number", "Depth"), sep = "_", convert = TRUE) %>%
mutate(Acquisition_Duration = round(replace_na(Acquisition_Duration, 10)))
}
phyto_counts <- phyto_counts %>%
left_join(measurement_info %>% select(Location, Station_Number, Depth, Acquisition_Duration),
by = c("Location", "Station_Number", "Depth")) %>%
# Add Flow Rate based on Location
mutate(Flow_Rate = case_when(
Location == "PE477" ~ 129,   # Flow rate for PE477
Location == "PE486" ~ 107,   # Flow rate for PE486
TRUE ~ NA_real_            # Assign NA if Location is neither
)) %>%
# Calculate Cells per mL
mutate(cells_per_mL = Total_Events / (Acquisition_Duration * Flow_Rate * 1e-3))
write.csv(phyto_counts, file = "./phytoplankton_counts_pe477_pe486.csv", row.names= F)
custom_palette <- c(
"PE477_1" = "#1f77b4", "PE477_2" = "#ff7f0e", "PE477_3" = "#2ca02c",
"PE477_4" = "#d62728", "PE477_5" = "#9467bd", "PE477_6" = "#8c564b",
"PE486_1" = "#e377c2", "PE486_2" = "#7f7f7f", "PE486_3" = "#bcbd22",
"PE486_4" = "#17becf", "PE486_5" = "#aec7e8", "PE486_6" = "#ffbb78",
"PE477_7" = "#98df8a", "PE486_7" = "#ff9896"
)
# Create the plot with facets for Depth and Gate
ggplot(phyto_counts, aes(x = Location_Station, y = cells_per_mL, fill = Location_Station)) +
geom_bar(stat = "identity") + # Bar plot with count of events
facet_grid(Depth ~ Gate, scales = "fixed", switch = "both") + # Facets for Depth and Gate
scale_fill_manual(values = custom_palette) +
labs(
title = "Distribution of Events Across Location_Station",
x = "Location_Station",
y = "Number of Events"
) +
theme_bw() +
theme(
strip.background = element_rect(fill = "lightgray", colour = "black"),
strip.text = element_text(size = 10, face = "bold"),
axis.text.x = element_text(angle = 90)
)
ggsave("phyto_abundance_facet_plot_depths.svg", width = 24, height = 8, dpi = 800)
# Create the plot with facets for Depth and Gate
ggplot(phyto_counts %>%
filter(!Gate %in% c(0, 1, 14, 3, 4, 5, 6))
, aes(x = Location_Station, y = cells_per_mL, fill = Location_Station)) +
geom_bar(stat = "identity") + # Bar plot with count of events
facet_grid(Depth ~ Gate, scales = "fixed", switch = "both") + # Facets for Depth and Gate
scale_fill_manual(values = custom_palette) +
labs(
title = "Distribution of Events Across Location_Station",
x = "Location_Station",
y = "Number of Events"
) +
theme_bw() +
theme(
strip.background = element_rect(fill = "lightgray", colour = "black"),
strip.text = element_text(size = 10, face = "bold"),
axis.text.x = element_text(angle = 90)
)
library(dplyr)
library(ggplot2)
library(ggfortify) # For PCA visualization with ggplot2
# Pivot the data to make gates wide and use Total_Events as values
pca_data <- phyto_counts %>%
select(Location, Station_Number, Depth, Gate, Total_Events) %>% # Select relevant columns
pivot_wider(names_from = Gate, values_from = Total_Events, names_prefix = "gate_") %>%
select(-gate_0)  %>% # Pivot gates wide
mutate(across(starts_with("gate_"), ~ as.numeric(unlist(.))))
# Perform PCA
pca_result <- prcomp(pca_data %>% select(-Location, -Station_Number, -Depth), center = TRUE, scale. = TRUE)
# Add PCA results and metadata back to the dataset
pca_data <- pca_data %>%
mutate(
PC1 = pca_result$x[, 1],
PC2 = pca_result$x[, 2]
)
# Create the plot with facets for Depth and Gate
ggplot(phyto_counts %>%
filter(!Gate %in% c(0, 1, 14, 3, 4, 5, 6))
, aes(x = Location_Station, y = cells_per_mL, fill = Location_Station)) +
geom_bar(stat = "identity") + # Bar plot with count of events
facet_grid(Depth ~ Gate, scales = "fixed", switch = "both") + # Facets for Depth and Gate
scale_fill_manual(values = custom_palette) +
labs(
title = "Distribution of Events Across Location_Station",
x = "Location_Station",
y = "Number of Events"
) +
theme_bw() +
theme(
strip.background = element_rect(fill = "lightgray", colour = "black"),
strip.text = element_text(size = 10, face = "bold"),
axis.text.x = element_text(angle = 90)
)
# Create the plot with facets for Depth and Gate
ggplot(phyto_counts, aes(x = Location_Station, y = cells_per_mL, fill = Location_Station)) +
geom_bar(stat = "identity") + # Bar plot with count of events
facet_grid(Depth ~ Gate, scales = "fixed", switch = "both") + # Facets for Depth and Gate
scale_fill_manual(values = custom_palette) +
labs(
title = "Distribution of Events Across Location_Station",
x = "Location_Station",
y = "Number of Events"
) +
theme_bw() +
theme(
strip.background = element_rect(fill = "lightgray", colour = "black"),
strip.text = element_text(size = 10, face = "bold"),
axis.text.x = element_text(angle = 90)
)
# Create the plot with facets for Depth and Gate
ggplot(phyto_counts %>%
filter(!Gate %in% c(0, 1, 14, 3, 4, 5, 6))
, aes(x = Location_Station, y = cells_per_mL, fill = Location_Station)) +
geom_bar(stat = "identity") + # Bar plot with count of events
facet_grid(Depth ~ Gate, scales = "fixed", switch = "both") + # Facets for Depth and Gate
scale_fill_manual(values = custom_palette) +
labs(
title = "Distribution of Events Across Location_Station",
x = "Location_Station",
y = "Number of Events"
) +
theme_bw() +
theme(
strip.background = element_rect(fill = "lightgray", colour = "black"),
strip.text = element_text(size = 10, face = "bold"),
axis.text.x = element_text(angle = 90)
)
# Create the plot with facets for Depth and Gate
ggplot(phyto_counts, aes(x = Location_Station, y = cells_per_mL, fill = Location_Station)) +
geom_bar(stat = "identity") + # Bar plot with count of events
facet_grid(Depth ~ Gate, scales = "fixed", switch = "both") + # Facets for Depth and Gate
scale_fill_manual(values = custom_palette) +
labs(
title = "Distribution of Events Across Location_Station",
x = "Location_Station",
y = "Number of Events"
) +
theme_bw() +
theme(
strip.background = element_rect(fill = "lightgray", colour = "black"),
strip.text = element_text(size = 10, face = "bold"),
axis.text.x = element_text(angle = 90)
)
# Create the plot with facets for Depth and Gate
ggplot(phyto_counts %>%
filter(!Gate %in% c(0, 1, 14, 3, 4, 5, 6))
, aes(x = Location_Station, y = cells_per_mL, fill = Location_Station)) +
geom_bar(stat = "identity") + # Bar plot with count of events
facet_grid(Depth ~ Gate, scales = "fixed", switch = "both") + # Facets for Depth and Gate
scale_fill_manual(values = custom_palette) +
labs(
title = "Distribution of Events Across Location_Station",
x = "Location_Station",
y = "Number of Events"
) +
theme_bw() +
theme(
strip.background = element_rect(fill = "lightgray", colour = "black"),
strip.text = element_text(size = 10, face = "bold"),
axis.text.x = element_text(angle = 90)
)
write.csv(phyto_counts, file = "./phytoplankton_counts_pe477_pe486.csv", row.names= F)
#Setting working directory
setwd("C:/Users/hisham.shaikh/OneDrive - UGent/Projects/Microbial_Abundances/Microbial_Abundances_NJ2020_PE477_PE486/Microbial Abundances/Microbial_Abundances/Microbial_Abundances")
#Install packages if needed.
if (!requireNamespace("BiocManager", quietly = TRUE)){
install.packages("BiocManager")
}
#Load packages
{
library("tidyverse")
library("magrittr")
library("readxl")
library("readr")
}
{
counts <- as.data.frame(read_csv("counts.csv"))
dim(counts)
}
View(counts)
{
#To get the counts per population for each file
counts<- pivot_wider(counts, names_from = "pop", values_from = "count")
dim(counts)
colnames(counts)[colnames(counts) == 'root'] <- "Total"
colnames(counts)[colnames(counts) == 'file_name'] <- "Sample_Name"
head(counts)
}
#Import metadata which is saved as an Excel sheet
{
metadata <- read_excel("Metadata/Metadata_Microbial_Abundances_NJ2020_PE477_PE486.xlsx")
#adding flowrate
flowrate<- read_excel("Metadata/Metadata_Microbial_Abundances_NJ2020_PE477_PE486.xlsx",
sheet = "flowrate")
}
View(metadata)
if (length(setdiff(counts$Sample_Name, metadata$Sample_Name)) > 0) {
print("There are samples that were counted but doesn't have associated metadata")
} else {
print("All samples processed have associated metadata")
}
#Merge counts and metadata in one file & read the dates in appropriate format
{
counts_metadata<- base::merge(counts, metadata, by = "Sample_Name")
counts_metadata<- dplyr::mutate(counts_metadata,Expt_Date = as.Date(as.character(Expt_Date), format= "%y%m%d"))
counts_metadata<- dplyr::mutate(counts_metadata,Date_Measurement = as.Date(as.character(Date_Measurement), format= "%y%m%d"))
#flowrate<- dplyr::mutate(flowrate, Date_Measurement = as.Date(as.character(Date_Measurement), format= "%y%m%d"))
#we could have done flowrate per date of measurement, but because one of our sample is from 2020, the flowrate wasn't noted. So let's go with average.
# dim(counts_metadata)
# head(counts_metadata)
counts_metadata[,'Flowrate'] <- mean(flowrate$Flow_rate)
}
#Adding Boolean columns for bacterial and viral total counts
{
counts_metadata$HNALNA <- counts_metadata$HNA_Bacteria + counts_metadata$LNA_Bacteria
counts_metadata$V1V2V3 <- counts_metadata$V1 + counts_metadata$V2 + counts_metadata$V3
#We can perform a simple linear regression to see if we could use Boolean
# addition of HNA/LNA and V1/V2/V3 as replacements for total bacterial and viral
# counts. Alternatively, these could have been added as Boolean gates during processing
scatter.smooth(counts_metadata$Bacteria, counts_metadata$HNALNA, main = "Bacterial Counts")
summary(lm(counts_metadata$Bacteria ~ counts_metadata$HNALNA))  #Gives an R-square value of 1.0
#Perhaps the next few lines aren't as important.
# plot(fitted(lm(counts_metadata$Bacteria ~ counts_metadata$HNALNA)), resid(lm(counts_metadata$Bacteria ~ counts_metadata$HNALNA)))
# abline(0,0)
# qqnorm(resid(lm(counts_metadata$Bacteria ~ counts_metadata$HNALNA)))
# qqline(resid(lm(counts_metadata$Bacteria ~ counts_metadata$HNALNA)))
scatter.smooth(counts_metadata$Viruses, counts_metadata$V1V2V3, main = "Viral Counts")
summary(lm(counts_metadata$Viruses ~ counts_metadata$V1V2V3))  #Gives an R-square value of 0.999
}
#Separate the dataframe containing TE
TE<- counts_metadata[counts_metadata$Sample_Type == 'TE',]
plot(TE[TE$Staining_Protocol == 'Bacteria',]$HNALNA) #Plotting TE counts in Bacteria
plot(TE[TE$Staining_Protocol == 'Viruses',]$V1V2V3) #Plotting TE counts in V1V2V3
#Checking if we can come up with a criterion for detecting outliers in TE samples
TE[TE$Staining_Protocol == 'Bacteria',]$HNALNA #Bacterial TE
boxplot(TE[TE$Staining_Protocol == 'Bacteria',]$HNALNA)
boxplot.stats(TE[TE$Staining_Protocol == 'Bacteria',]$HNALNA)$out
#Adding an empty TE column. The correct TE for viruses and for bacteria.
counts_metadata[,'TE_value']<- NA
for (name in counts_metadata$Sample_Name){ #we first decide id we'll use TE values from viral samples or bacterial
if (counts_metadata[counts_metadata$Sample_Name == name,]$Staining_Protocol == 'Viruses'
#selecting rows with the specified file name that also had viral staining protocol
) {
if (counts_metadata[counts_metadata$Sample_Name == name,]$Sample_Type == 'TE') {
print("TE") #we don't want this. so we move on and look for a count file
} else if (counts_metadata[counts_metadata$Sample_Name == name,]$Sample_Type == 'Count') {
if (counts_metadata[which(counts_metadata$Sample_Name == name) + c(-1), ]$Sample_Type == 'TE'
#looking to see if there is a TE above this count file. if yes, we record it as 'a'
){
a<- counts_metadata[which(counts_metadata$Sample_Name == name) + c(-1), ]$V1V2V3
if (counts_metadata[which(counts_metadata$Sample_Name == name) + c(-2), ]$Sample_Type == 'TE'
#here we see if there is a TE above our first TE. we record this as 'b'
){
b<- counts_metadata[which(counts_metadata$Sample_Name == name) + c(-2), ]$V1V2V3
}
}
print(paste(name, a, b, mean(c(a,b)))) #too see what the output is
counts_metadata[counts_metadata$Sample_Name == name,]$TE_value <- mean(c(a,b))
#adding the output to TE_value column
}
} else { #we repeat the same for bacterial files
if (counts_metadata[counts_metadata$Sample_Name == name,]$Staining_Protocol == 'Bacteria') {
if (counts_metadata[counts_metadata$Sample_Name == name,]$Sample_Type == 'TE') {
print("yes")
} else if (counts_metadata[counts_metadata$Sample_Name == name,]$Sample_Type == 'Count') {
if (counts_metadata[which(counts_metadata$Sample_Name == name) + c(-1), ]$Sample_Type == 'TE'){
a<- counts_metadata[which(counts_metadata$Sample_Name == name) + c(-1), ]$HNALNA
if (counts_metadata[which(counts_metadata$Sample_Name == name) + c(-2), ]$Sample_Type == 'TE'){
b<- counts_metadata[which(counts_metadata$Sample_Name == name) + c(-2), ]$HNALNA
}
}
print(paste(name, a, b, mean(c(a,b))))
counts_metadata[counts_metadata$Sample_Name == name,]$TE_value <- mean(c(a,b))
}}}
}
plot(counts_metadata[counts_metadata$Staining_Protocol=='Bacteria',]$TE_value)
boxplot(counts_metadata[counts_metadata$Staining_Protocol=='Bacteria',]$TE_value)
#looking at this plot for TE bacteria, its nicer to subtract following sample files with preceding TE ones, instead of average
summary(counts_metadata[counts_metadata$Staining_Protocol=='Bacteria',]$TE_value)
plot(counts_metadata[counts_metadata$Staining_Protocol=='Viruses',]$TE_value)
boxplot(counts_metadata[counts_metadata$Staining_Protocol=='Viruses',]$TE_value)
#looking at this plot for TE viruses, its nicer to subtract following sample files with preceding TE ones, instead of average
summary(counts_metadata[counts_metadata$Staining_Protocol=='Viruses',]$TE_value)
for (cols in c( "c_Bacteria", "c_HNA", "c_LNA", "c_Viruses", "c_V1", "c_V2", "c_V3")){
counts_metadata[, cols] <- NA
}
{
counts_metadata$c_Viruses<- with(counts_metadata, ((V1V2V3-((V1V2V3/V1V2V3)*TE_value))*Dilution*60*1000)/(Flowrate*Acquisition_Duration))
counts_metadata$c_V1<- with(counts_metadata, ((V1-((V1/V1V2V3)*TE_value))*Dilution*60*1000)/(Flowrate*Acquisition_Duration))
counts_metadata$c_V2<- with(counts_metadata, ((V2-((V2/V1V2V3)*TE_value))*Dilution*60*1000)/(Flowrate*Acquisition_Duration))
counts_metadata$c_V3<- with(counts_metadata, ((V3-((V3/V1V2V3)*TE_value))*Dilution*60*1000)/(Flowrate*Acquisition_Duration))
counts_metadata$c_Bacteria<- with(counts_metadata, ((HNALNA-((HNALNA/HNALNA)*TE_value))*Dilution*60*1000)/(Flowrate*Acquisition_Duration))
counts_metadata$c_HNA<- with(counts_metadata, ((HNA_Bacteria-((HNA_Bacteria/HNALNA)*TE_value))*Dilution*60*1000)/(Flowrate*Acquisition_Duration))
counts_metadata$c_LNA<- with(counts_metadata, ((LNA_Bacteria-((LNA_Bacteria/HNALNA)*TE_value))*Dilution*60*1000)/(Flowrate*Acquisition_Duration))
}
{
counts_metadata[counts_metadata$Staining_Protocol == 'Viruses',]$c_Bacteria <- NA
counts_metadata[counts_metadata$Staining_Protocol == 'Viruses',]$c_HNA <- NA
counts_metadata[counts_metadata$Staining_Protocol == 'Viruses',]$c_LNA <- NA
counts_metadata[counts_metadata$Staining_Protocol == 'Bacteria',]$c_Viruses <- NA
counts_metadata[counts_metadata$Staining_Protocol == 'Bacteria',]$c_V1 <- NA
counts_metadata[counts_metadata$Staining_Protocol == 'Bacteria',]$c_V2 <- NA
counts_metadata[counts_metadata$Staining_Protocol == 'Bacteria',]$c_V3 <- NA
}
{
abundance<- counts_metadata[counts_metadata$Sample_Type== 'Count',]
abundance<- abundance[, c('Sample_Name', 'Staining_Protocol', 'Expt_Date',
'Location', 'Expt_No','Depth', 'c_Bacteria', 'c_HNA', 'c_LNA',
'c_Viruses', 'c_V1', 'c_V2', 'c_V3', 'Comments')]
abundance[abundance$Location == 'NJ2020',]$Depth <- 1
abundance<- abundance[
with(abundance,
order(
abundance[, 'Staining_Protocol'],
abundance[, 'Location'],
abundance[, 'Expt_No'],
abundance[, 'Depth']
)),
]
}
length(which(abundance$Location == "NJ2020"))
length(which(abundance$Location == "PE477"))
length(which(abundance$Location == "PE486"))
View(abundance)
3454942.3/10^6
1317133.4/10^6
182285832/10^7
33559720/10^7
37903418/10^7
