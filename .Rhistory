bacteria<- cruises[which(cruises$Staining_Protocol == 'Bacteria'),] %>%
select(-c(Staining_Protocol, c_Viruses, c_V1, c_V2, c_V3, Comments)) %>%
stats::setNames(c("Bacterial_Sample_Name", "Expt_Date", "Location", "Expt_No", "Depth", "Total_Bacteria", "HNA", "LNA"))
cruise_abundance<- merge(viruses, bacteria, by = c("Location", "Expt_No", "Depth", "Expt_Date")) %>%
select("Bacterial_Sample_Name", "Viral_Sample_Name", "Location", "Expt_No",
"Depth", "Expt_Date", "Total_Bacteria", "HNA", "LNA", "Total_Viruses", "V1", "V2", "V3")
rm(viruses)
rm(bacteria)
}
{
viruses<- NJ2020[which(NJ2020$Staining_Protocol == 'Viruses'),] %>%
select(-c(Staining_Protocol, Depth, c_Bacteria, c_HNA, c_LNA, Comments)) %>%
stats::setNames(c("Viral_Sample_Name", "Expt_Date", "Location", "Expt_No", "Total_Viruses", "V1", "V2", "V3"))
bacteria<- NJ2020[which(NJ2020$Staining_Protocol == 'Bacteria'),] %>%
select(-c(Staining_Protocol, Depth, c_Viruses, c_V1, c_V2, c_V3, Comments)) %>%
stats::setNames(c("Bacterial_Sample_Name", "Expt_Date", "Location", "Expt_No", "Total_Bacteria", "HNA", "LNA"))
NJ2020_abundance<- merge(viruses, bacteria, by = c("Location", "Expt_No", "Expt_Date")) %>%
select("Bacterial_Sample_Name", "Viral_Sample_Name", "Location", "Expt_No",
"Expt_Date", "Total_Bacteria", "HNA", "LNA", "Total_Viruses", "V1", "V2", "V3")
rm(viruses)
rm(bacteria)
}
cruise_abundance$VBR<- cruise_abundance$Total_Viruses/cruise_abundance$Total_Bacteria
NJ2020_abundance$VBR<- NJ2020_abundance$Total_Viruses/NJ2020_abundance$Total_Bacteria
#Adding coordinates and nutrients to the data sets
coordinates <- read_excel("Metadata/Metadata_Microbial_Abundances_NJ2020_PE477_PE486.xlsx",
sheet = "Coordinates")
#Load packages
{
library("tidyverse")
library("magrittr")
library("readxl")
library("readr")
}
#Adding coordinates and nutrients to the data sets
coordinates <- read_excel("Metadata/Metadata_Microbial_Abundances_NJ2020_PE477_PE486.xlsx",
sheet = "Coordinates")
install.packages("openxlsx2")
#Adding coordinates and nutrients to the data sets
coordinates <- openxlsx::read_excel("Metadata/Metadata_Microbial_Abundances_NJ2020_PE477_PE486.xlsx",
sheet = "Coordinates")
nutrients_ts<- read_excel("Metadata/Metadata_Microbial_Abundances_NJ2020_PE477_PE486.xlsx",
sheet = "Nutrients")
#Adding coordinates and nutrients to the data sets
coordinates <- openxlsx::read.xlsx("Metadata/Metadata_Microbial_Abundances_NJ2020_PE477_PE486.xlsx",
sheet = "Coordinates")
nutrients_ts<- openxlsx::read.xlsx("Metadata/Metadata_Microbial_Abundances_NJ2020_PE477_PE486.xlsx",
sheet = "Nutrients")
NJ2020_abundance<- merge(NJ2020_abundance, coordinates[coordinates$Location == 'NJ2020', c(1,3,4)], by = "Location")
cruise_abundance<- merge(cruise_abundance, coordinates[coordinates$Location %in% c('PE477', 'PE486'),]  )
NJ2020_abundance<- merge(NJ2020_abundance, nutrients_ts[nutrients_ts$Location == 'NJ2020',], by = "Expt_No")
cruise_abundance<- merge(cruise_abundance, nutrients_ts[nutrients_ts$Location %in% c('PE477', 'PE486'),])
#Combine and save as csv Save as a csv file
abundance_abiotic <- rbind(NJ2020_abundance, cruise_abundance)
#for now I am manually deleting the ones that don't belong
#first only take the depths needed.
NJ2020<- abundance[abundance$Location == 'NJ2020',]
cruises<-abundance[abundance$Depth %in% c(7.0, 15.0, 30.0),]
to_delete<- c("BA210507.008", "VI210507.013", "VI210507.016")
for (delete in to_delete){
cruises<- cruises[!(cruises$Sample_Name == delete),]
}
{
viruses<- cruises[which(cruises$Staining_Protocol == 'Viruses'),] %>%
select(-c(Staining_Protocol, c_Bacteria, c_HNA, c_LNA, Comments)) %>%
stats::setNames(c("Viral_Sample_Name", "Expt_Date", "Location", "Expt_No", "Depth", "Total_Viruses", "V1", "V2", "V3"))
bacteria<- cruises[which(cruises$Staining_Protocol == 'Bacteria'),] %>%
select(-c(Staining_Protocol, c_Viruses, c_V1, c_V2, c_V3, Comments)) %>%
stats::setNames(c("Bacterial_Sample_Name", "Expt_Date", "Location", "Expt_No", "Depth", "Total_Bacteria", "HNA", "LNA"))
cruise_abundance<- merge(viruses, bacteria, by = c("Location", "Expt_No", "Depth", "Expt_Date")) %>%
select("Bacterial_Sample_Name", "Viral_Sample_Name", "Location", "Expt_No",
"Depth", "Expt_Date", "Total_Bacteria", "HNA", "LNA", "Total_Viruses", "V1", "V2", "V3")
rm(viruses)
rm(bacteria)
}
{
viruses<- NJ2020[which(NJ2020$Staining_Protocol == 'Viruses'),] %>%
select(-c(Staining_Protocol, Depth, c_Bacteria, c_HNA, c_LNA, Comments)) %>%
stats::setNames(c("Viral_Sample_Name", "Expt_Date", "Location", "Expt_No", "Total_Viruses", "V1", "V2", "V3"))
bacteria<- NJ2020[which(NJ2020$Staining_Protocol == 'Bacteria'),] %>%
select(-c(Staining_Protocol, Depth, c_Viruses, c_V1, c_V2, c_V3, Comments)) %>%
stats::setNames(c("Bacterial_Sample_Name", "Expt_Date", "Location", "Expt_No", "Total_Bacteria", "HNA", "LNA"))
NJ2020_abundance<- merge(viruses, bacteria, by = c("Location", "Expt_No", "Expt_Date")) %>%
select("Bacterial_Sample_Name", "Viral_Sample_Name", "Location", "Expt_No",
"Expt_Date", "Total_Bacteria", "HNA", "LNA", "Total_Viruses", "V1", "V2", "V3")
rm(viruses)
rm(bacteria)
}
cruise_abundance$VBR<- cruise_abundance$Total_Viruses/cruise_abundance$Total_Bacteria
NJ2020_abundance$VBR<- NJ2020_abundance$Total_Viruses/NJ2020_abundance$Total_Bacteria
#Adding coordinates and nutrients to the data sets
coordinates <- openxlsx::read.xlsx("Metadata/Metadata_Microbial_Abundances_NJ2020_PE477_PE486.xlsx",
sheet = "Coordinates")
nutrients_ts<- openxlsx::read.xlsx("Metadata/Metadata_Microbial_Abundances_NJ2020_PE477_PE486.xlsx",
sheet = "Nutrients")
coordinates[coordinates$Location == 'NJ2020', c(1,3,4)]
merge(NJ2020_abundance, coordinates[coordinates$Location == 'NJ2020', c(1,3,4)], by = "Location")
coordinates[coordinates$Location %in% c('PE477', 'PE486'),]
merge(cruise_abundance, coordinates[coordinates$Location %in% c('PE477', 'PE486'),]  )
merge(NJ2020_abundance, nutrients_ts[nutrients_ts$Location == 'NJ2020',], by = "Expt_No")
merge(NJ2020_abundance, nutrients_ts[nutrients_ts$Location == 'NJ2020',],
by = c("Location", "Expt_No"))
NJ2020_abundance<- merge(NJ2020_abundance, nutrients_ts[nutrients_ts$Location == 'NJ2020',],
by = c("Location", "Expt_No"))
cruise_abundance<- merge(cruise_abundance, nutrients_ts[nutrients_ts$Location %in% c('PE477', 'PE486'),])
cruise_abundance
#Combine and save as csv Save as a csv file
abundance_abiotic <- rbind(NJ2020_abundance, cruise_abundance)
abundance_abiotic
write.csv(abundance_abiotic, "nj2020_pe477_pe486_bv_abundance_abiotic.csv", row.names = F)
{
abundance<- counts_metadata[counts_metadata$Sample_Type== 'Count',]
abundance<- abundance[, c('Sample_Name', 'Staining_Protocol', 'Expt_Date',
'Location', 'Expt_No','Depth', 'c_Bacteria', 'c_HNA', 'c_LNA',
'c_Viruses', 'c_V1', 'c_V2', 'c_V3', 'Comments')]
abundance[abundance$Location == 'NJ2020',]$Depth <- 1
abundance<- abundance[
with(abundance,
order(
abundance[, 'Staining_Protocol'],
abundance[, 'Location'],
abundance[, 'Expt_No'],
abundance[, 'Depth']
)),
]
}
length(which(abundance$Location == "NJ2020"))
length(which(abundance$Location == "PE477"))
length(which(abundance$Location == "PE486"))
#for now I am manually deleting the ones that don't belong
#first only take the depths needed.
NJ2020<- abundance[abundance$Location == 'NJ2020',]
cruises<-abundance[abundance$Depth %in% c(7.0, 15.0, 30.0),]
to_delete<- c("BA210507.008", "VI210507.013", "VI210507.016")
for (delete in to_delete){
cruises<- cruises[!(cruises$Sample_Name == delete),]
}
{
viruses<- cruises[which(cruises$Staining_Protocol == 'Viruses'),] %>%
select(-c(Staining_Protocol, c_Bacteria, c_HNA, c_LNA, Comments)) %>%
stats::setNames(c("Viral_Sample_Name", "Expt_Date", "Location", "Expt_No", "Depth", "Total_Viruses", "V1", "V2", "V3"))
bacteria<- cruises[which(cruises$Staining_Protocol == 'Bacteria'),] %>%
select(-c(Staining_Protocol, c_Viruses, c_V1, c_V2, c_V3, Comments)) %>%
stats::setNames(c("Bacterial_Sample_Name", "Expt_Date", "Location", "Expt_No", "Depth", "Total_Bacteria", "HNA", "LNA"))
cruise_abundance<- merge(viruses, bacteria, by = c("Location", "Expt_No", "Depth", "Expt_Date")) %>%
select("Bacterial_Sample_Name", "Viral_Sample_Name", "Location", "Expt_No",
"Depth", "Expt_Date", "Total_Bacteria", "HNA", "LNA", "Total_Viruses", "V1", "V2", "V3")
rm(viruses)
rm(bacteria)
}
cruise_abundance$VBR<- cruise_abundance$Total_Viruses/cruise_abundance$Total_Bacteria
NJ2020_abundance$VBR<- NJ2020_abundance$Total_Viruses/NJ2020_abundance$Total_Bacteria
#Adding coordinates and nutrients to the data sets
coordinates <- openxlsx::read.xlsx("Metadata/Metadata_Microbial_Abundances_NJ2020_PE477_PE486.xlsx",
sheet = "Coordinates")
nutrients_ts<- openxlsx::read.xlsx("Metadata/Metadata_Microbial_Abundances_NJ2020_PE477_PE486.xlsx",
sheet = "Nutrients")
NJ2020_abundance<- merge(NJ2020_abundance, coordinates[coordinates$Location == 'NJ2020', c(1,3,4)], by = "Location")
cruise_abundance<- merge(cruise_abundance, coordinates[coordinates$Location %in% c('PE477', 'PE486'),]  )
NJ2020_abundance<- merge(NJ2020_abundance, nutrients_ts[nutrients_ts$Location == 'NJ2020',],
by = c("Location", "Expt_No"))
cruise_abundance<- merge(cruise_abundance, nutrients_ts[nutrients_ts$Location %in% c('PE477', 'PE486'),])
#Combine and save as csv Save as a csv file
abundance_abiotic <- rbind(NJ2020_abundance, cruise_abundance)
abundance
NJ2020
cruises
{
viruses<- cruises[which(cruises$Staining_Protocol == 'Viruses'),] %>%
select(-c(Staining_Protocol, c_Bacteria, c_HNA, c_LNA, Comments)) %>%
stats::setNames(c("Viral_Sample_Name", "Expt_Date", "Location", "Expt_No", "Depth", "Total_Viruses", "V1", "V2", "V3"))
bacteria<- cruises[which(cruises$Staining_Protocol == 'Bacteria'),] %>%
select(-c(Staining_Protocol, c_Viruses, c_V1, c_V2, c_V3, Comments)) %>%
stats::setNames(c("Bacterial_Sample_Name", "Expt_Date", "Location", "Expt_No", "Depth", "Total_Bacteria", "HNA", "LNA"))
cruise_abundance<- merge(viruses, bacteria, by = c("Location", "Expt_No", "Depth", "Expt_Date")) %>%
select("Bacterial_Sample_Name", "Viral_Sample_Name", "Location", "Expt_No",
"Depth", "Expt_Date", "Total_Bacteria", "HNA", "LNA", "Total_Viruses", "V1", "V2", "V3")
rm(viruses)
rm(bacteria)
}
library(tiduverse)
library(tidyverse)
cruises<-abundance[abundance$Depth %in% c(7.0, 15.0, 30.0),]
to_delete<- c("BA210507.008", "VI210507.013", "VI210507.016")
for (delete in to_delete){
cruises<- cruises[!(cruises$Sample_Name == delete),]
}
{
viruses<- cruises[which(cruises$Staining_Protocol == 'Viruses'),] %>%
select(-c(Staining_Protocol, c_Bacteria, c_HNA, c_LNA, Comments)) %>%
stats::setNames(c("Viral_Sample_Name", "Expt_Date", "Location", "Expt_No", "Depth", "Total_Viruses", "V1", "V2", "V3"))
bacteria<- cruises[which(cruises$Staining_Protocol == 'Bacteria'),] %>%
select(-c(Staining_Protocol, c_Viruses, c_V1, c_V2, c_V3, Comments)) %>%
stats::setNames(c("Bacterial_Sample_Name", "Expt_Date", "Location", "Expt_No", "Depth", "Total_Bacteria", "HNA", "LNA"))
cruise_abundance<- merge(viruses, bacteria, by = c("Location", "Expt_No", "Depth", "Expt_Date")) %>%
select("Bacterial_Sample_Name", "Viral_Sample_Name", "Location", "Expt_No",
"Depth", "Expt_Date", "Total_Bacteria", "HNA", "LNA", "Total_Viruses", "V1", "V2", "V3")
rm(viruses)
rm(bacteria)
}
{
viruses<- NJ2020[which(NJ2020$Staining_Protocol == 'Viruses'),] %>%
select(-c(Staining_Protocol, Depth, c_Bacteria, c_HNA, c_LNA, Comments)) %>%
stats::setNames(c("Viral_Sample_Name", "Expt_Date", "Location", "Expt_No", "Total_Viruses", "V1", "V2", "V3"))
bacteria<- NJ2020[which(NJ2020$Staining_Protocol == 'Bacteria'),] %>%
select(-c(Staining_Protocol, Depth, c_Viruses, c_V1, c_V2, c_V3, Comments)) %>%
stats::setNames(c("Bacterial_Sample_Name", "Expt_Date", "Location", "Expt_No", "Total_Bacteria", "HNA", "LNA"))
NJ2020_abundance<- merge(viruses, bacteria, by = c("Location", "Expt_No", "Expt_Date")) %>%
select("Bacterial_Sample_Name", "Viral_Sample_Name", "Location", "Expt_No",
"Expt_Date", "Total_Bacteria", "HNA", "LNA", "Total_Viruses", "V1", "V2", "V3")
rm(viruses)
rm(bacteria)
}
cruise_abundance$VBR<- cruise_abundance$Total_Viruses/cruise_abundance$Total_Bacteria
NJ2020_abundance$VBR<- NJ2020_abundance$Total_Viruses/NJ2020_abundance$Total_Bacteria
#Adding coordinates and nutrients to the data sets
coordinates <- openxlsx::read.xlsx("Metadata/Metadata_Microbial_Abundances_NJ2020_PE477_PE486.xlsx",
sheet = "Coordinates")
nutrients_ts<- openxlsx::read.xlsx("Metadata/Metadata_Microbial_Abundances_NJ2020_PE477_PE486.xlsx",
sheet = "Nutrients")
NJ2020_abundance<- merge(NJ2020_abundance, coordinates[coordinates$Location == 'NJ2020', c(1,3,4)], by = "Location")
cruise_abundance<- merge(cruise_abundance, coordinates[coordinates$Location %in% c('PE477', 'PE486'),]  )
NJ2020_abundance<- merge(NJ2020_abundance, nutrients_ts[nutrients_ts$Location == 'NJ2020',],
by = c("Location", "Expt_No"))
cruise_abundance<- merge(cruise_abundance, nutrients_ts[nutrients_ts$Location %in% c('PE477', 'PE486'),])
#Combine and save as csv Save as a csv file
abundance_abiotic <- rbind(NJ2020_abundance, cruise_abundance)
write.csv(abundance_abiotic, "nj2020_pe477_pe486_bv_abundance_abiotic.csv", row.names = F)
View(abundance_abiotic)
coordinates
nutrients_ts
nutrients_ts[nutrients_ts$Location == 'NJ2020',]$Depth <- 1
NJ2020_abundance<- merge(NJ2020_abundance, coordinates[coordinates$Location == 'NJ2020', c(1,3,4)], by = "Location")
cruise_abundance<- merge(cruise_abundance, coordinates[coordinates$Location %in% c('PE477', 'PE486'),]  )
NJ2020_abundance<- merge(NJ2020_abundance, nutrients_ts[nutrients_ts$Location == 'NJ2020',],
by = c("Location", "Expt_No"))
cruise_abundance<- merge(cruise_abundance, nutrients_ts[nutrients_ts$Location %in% c('PE477', 'PE486'),])
{
abundance<- counts_metadata[counts_metadata$Sample_Type== 'Count',]
abundance<- abundance[, c('Sample_Name', 'Staining_Protocol', 'Expt_Date',
'Location', 'Expt_No','Depth', 'c_Bacteria', 'c_HNA', 'c_LNA',
'c_Viruses', 'c_V1', 'c_V2', 'c_V3', 'Comments')]
abundance[abundance$Location == 'NJ2020',]$Depth <- 1
abundance<- abundance[
with(abundance,
order(
abundance[, 'Staining_Protocol'],
abundance[, 'Location'],
abundance[, 'Expt_No'],
abundance[, 'Depth']
)),
]
}
#Need to figure out how to remove duplicates, and only take one value forward.
length(which(abundance$Location == "NJ2020"))
length(which(abundance$Location == "PE477"))
length(which(abundance$Location == "PE486"))
#for now I am manually deleting the ones that don't belong
#first only take the depths needed.
NJ2020<- abundance[abundance$Location == 'NJ2020',]
cruises<-abundance[abundance$Depth %in% c(7.0, 15.0, 30.0),]
to_delete<- c("BA210507.008", "VI210507.013", "VI210507.016")
for (delete in to_delete){
cruises<- cruises[!(cruises$Sample_Name == delete),]
}
{
viruses<- cruises[which(cruises$Staining_Protocol == 'Viruses'),] %>%
select(-c(Staining_Protocol, c_Bacteria, c_HNA, c_LNA, Comments)) %>%
stats::setNames(c("Viral_Sample_Name", "Expt_Date", "Location", "Expt_No", "Depth", "Total_Viruses", "V1", "V2", "V3"))
bacteria<- cruises[which(cruises$Staining_Protocol == 'Bacteria'),] %>%
select(-c(Staining_Protocol, c_Viruses, c_V1, c_V2, c_V3, Comments)) %>%
stats::setNames(c("Bacterial_Sample_Name", "Expt_Date", "Location", "Expt_No", "Depth", "Total_Bacteria", "HNA", "LNA"))
cruise_abundance<- merge(viruses, bacteria, by = c("Location", "Expt_No", "Depth", "Expt_Date")) %>%
select("Bacterial_Sample_Name", "Viral_Sample_Name", "Location", "Expt_No",
"Depth", "Expt_Date", "Total_Bacteria", "HNA", "LNA", "Total_Viruses", "V1", "V2", "V3")
rm(viruses)
rm(bacteria)
}
{
viruses<- NJ2020[which(NJ2020$Staining_Protocol == 'Viruses'),] %>%
select(-c(Staining_Protocol, Depth, c_Bacteria, c_HNA, c_LNA, Comments)) %>%
stats::setNames(c("Viral_Sample_Name", "Expt_Date", "Location", "Expt_No", "Total_Viruses", "V1", "V2", "V3"))
bacteria<- NJ2020[which(NJ2020$Staining_Protocol == 'Bacteria'),] %>%
select(-c(Staining_Protocol, Depth, c_Viruses, c_V1, c_V2, c_V3, Comments)) %>%
stats::setNames(c("Bacterial_Sample_Name", "Expt_Date", "Location", "Expt_No", "Total_Bacteria", "HNA", "LNA"))
NJ2020_abundance<- merge(viruses, bacteria, by = c("Location", "Expt_No", "Expt_Date")) %>%
select("Bacterial_Sample_Name", "Viral_Sample_Name", "Location", "Expt_No",
"Expt_Date", "Total_Bacteria", "HNA", "LNA", "Total_Viruses", "V1", "V2", "V3")
rm(viruses)
rm(bacteria)
}
#Calculate VBR. For the same, you'll have to combine the tables of viruses and bacteria
cruise_abundance$VBR<- cruise_abundance$Total_Viruses/cruise_abundance$Total_Bacteria
NJ2020_abundance$VBR<- NJ2020_abundance$Total_Viruses/NJ2020_abundance$Total_Bacteria
#Adding coordinates and nutrients to the data sets
coordinates <- openxlsx::read.xlsx("Metadata/Metadata_Microbial_Abundances_NJ2020_PE477_PE486.xlsx",
sheet = "Coordinates")
nutrients_ts<- openxlsx::read.xlsx("Metadata/Metadata_Microbial_Abundances_NJ2020_PE477_PE486.xlsx",
sheet = "Nutrients")
nutrients_ts[nutrients_ts$Location == 'NJ2020',]$Depth <- 1
NJ2020_abundance<- merge(NJ2020_abundance, coordinates[coordinates$Location == 'NJ2020', c(1,3,4)], by = "Location")
cruise_abundance<- merge(cruise_abundance, coordinates[coordinates$Location %in% c('PE477', 'PE486'),]  )
NJ2020_abundance<- merge(NJ2020_abundance, nutrients_ts[nutrients_ts$Location == 'NJ2020',],
by = c("Location", "Expt_No"))
cruise_abundance<- merge(cruise_abundance, nutrients_ts[nutrients_ts$Location %in% c('PE477', 'PE486'),])
#Combine and save as csv Save as a csv file
abundance_abiotic <- rbind(NJ2020_abundance, cruise_abundance)
write.csv(abundance_abiotic, "nj2020_pe477_pe486_bv_abundance_abiotic.csv", row.names = F)
bash
fcs_express_phyto<- readxl::read_xlsx(".Data/PE477_PE486_algal_abundance_FCSExpress5_Output.xlsx")
fcs_express_phyto<- readxl::read_xlsx("./Data/PE477_PE486_algal_abundance_FCSExpress5_Output.xlsx")
# As all the gates were added as columns and not rows, I will slice chunks of 7 columns and add them as rows
num_chunks <- ncol(fcs_express_phyto) / 7
stacked_data <- lapply(1:num_chunks, function(i) {
# Select the 8 columns for this chunk
chunk <- fcs_express_phyto[, ((i - 1) * 7 + 1):(i * 7)]
# Rename the columns uniformly
colnames(chunk) <- c("Overlay", "Filename", "Overlay_Gate", "Gate",
"Total_Events", "percent_gated_cells", "percent_all_cells")
return(chunk)
})
phyto_counts <- do.call(rbind, stacked_data)
phyto_counts <- phyto_counts %>%
mutate(Tag = sub(".*_(PE\\d+_\\d+_\\d+).*", "\\1", Filename)) %>%
filter(!grepl("Cruise_NorthSea", Tag)) %>%
separate(Tag, into = c("Location", "Station_Number", "Depth"), sep = "_", convert = TRUE) %>%
mutate(
Overlay_Gate = gsub("Gate ", "", Overlay_Gate),
Gate = gsub("Gate ", "", Gate),
Gate = ifelse(tolower(Gate) == "none", "0", Gate)  # Replace "None" with "O"
) %>%
mutate(Location_Station = paste(Location, Station_Number, sep = "_")) %>%
filter(Depth %in% c(7, 15, 30)) %>%
filter(!Location_Station %in% c("PE477_7", "PE486_8")) %>%
filter(!grepl("SSC425", Filename)) %>%
filter(!grepl("8m", Filename))
custom_palette <- c(
"PE477_1" = "#1f77b4", "PE477_2" = "#ff7f0e", "PE477_3" = "#2ca02c",
"PE477_4" = "#d62728", "PE477_5" = "#9467bd", "PE477_6" = "#8c564b",
"PE486_1" = "#e377c2", "PE486_2" = "#7f7f7f", "PE486_3" = "#bcbd22",
"PE486_4" = "#17becf", "PE486_5" = "#aec7e8", "PE486_6" = "#ffbb78",
"PE477_7" = "#98df8a", "PE486_7" = "#ff9896"
)
# Create the plot with facets for Depth and Gate
ggplot(phyto_counts, aes(x = Location_Station, y = Total_Events, fill = Location_Station)) +
geom_bar(stat = "identity") + # Bar plot with count of events
facet_grid(Depth ~ Gate, scales = "fixed", switch = "both") + # Facets for Depth and Gate
scale_fill_manual(values = custom_palette) +
labs(
title = "Distribution of Events Across Location_Station",
x = "Location_Station",
y = "Number of Events"
) +
theme_bw() +
theme(
strip.background = element_rect(fill = "lightgray", colour = "black"),
strip.text = element_text(size = 10, face = "bold"),
axis.text.x = element_text(angle = 90)
)
ggsave("phyto_abundance_facet_plot_depths.svg", width = 24, height = 8, dpi = 800)
# Create the plot with facets for Depth and Gate
ggplot(phyto_counts %>%
filter(!Gate %in% c(0, 1, 14, 3, 4, 5, 6))
, aes(x = Location_Station, y = Total_Events, fill = Location_Station)) +
geom_bar(stat = "identity") + # Bar plot with count of events
facet_grid(Depth ~ Gate, scales = "fixed", switch = "both") + # Facets for Depth and Gate
scale_fill_manual(values = custom_palette) +
labs(
title = "Distribution of Events Across Location_Station",
x = "Location_Station",
y = "Number of Events"
) +
theme_bw() +
theme(
strip.background = element_rect(fill = "lightgray", colour = "black"),
strip.text = element_text(size = 10, face = "bold"),
axis.text.x = element_text(angle = 90)
)
library(dplyr)
write.csv(phyto_counts, file "./phytoplakton_counts_pe477_pe486.csv", row.name s= F)
write.csv(phyto_counts, file "./phytoplakton_counts_pe477_pe486.csv", row.names= F)
write.csv(phyto_counts, file = "./phytoplakton_counts_pe477_pe486.csv", row.names= F)
fcs_express_phyto<- readxl::read_xlsx("./Data/PE477_PE486_algal_abundance_FCSExpress5_Output.xlsx")
# As all the gates were added as columns and not rows, I will slice chunks of 7 columns and add them as rows
num_chunks <- ncol(fcs_express_phyto) / 7
stacked_data <- lapply(1:num_chunks, function(i) {
# Select the 8 columns for this chunk
chunk <- fcs_express_phyto[, ((i - 1) * 7 + 1):(i * 7)]
# Rename the columns uniformly
colnames(chunk) <- c("Overlay", "Filename", "Overlay_Gate", "Gate",
"Total_Events", "percent_gated_cells", "percent_all_cells")
return(chunk)
})
phyto_counts <- do.call(rbind, stacked_data)
phyto_counts <- phyto_counts %>%
mutate(Tag = sub(".*_(PE\\d+_\\d+_\\d+).*", "\\1", Filename)) %>%
filter(!grepl("Cruise_NorthSea", Tag)) %>%
separate(Tag, into = c("Location", "Station_Number", "Depth"), sep = "_", convert = TRUE) %>%
mutate(
Overlay_Gate = gsub("Gate ", "", Overlay_Gate),
Gate = gsub("Gate ", "", Gate),
Gate = ifelse(tolower(Gate) == "none", "0", Gate)  # Replace "None" with "O"
) %>%
mutate(Location_Station = paste(Location, Station_Number, sep = "_")) %>%
filter(Depth %in% c(7, 15, 30)) %>%
filter(!Location_Station %in% c("PE477_7", "PE486_8")) %>%
filter(!grepl("SSC425", Filename)) %>%
filter(!grepl("8m", Filename))
write.csv(phyto_counts, file = "./phytoplakton_counts_pe477_pe486.csv", row.names= F)
library(tidyverse)
fcs_express_phyto<- readxl::read_xlsx("./Data/PE477_PE486_algal_abundance_FCSExpress5_Output.xlsx")
# As all the gates were added as columns and not rows, I will slice chunks of 7 columns and add them as rows
num_chunks <- ncol(fcs_express_phyto) / 7
stacked_data <- lapply(1:num_chunks, function(i) {
# Select the 8 columns for this chunk
chunk <- fcs_express_phyto[, ((i - 1) * 7 + 1):(i * 7)]
# Rename the columns uniformly
colnames(chunk) <- c("Overlay", "Filename", "Overlay_Gate", "Gate",
"Total_Events", "percent_gated_cells", "percent_all_cells")
return(chunk)
})
phyto_counts <- do.call(rbind, stacked_data)
phyto_counts <- phyto_counts %>%
mutate(Tag = sub(".*_(PE\\d+_\\d+_\\d+).*", "\\1", Filename)) %>%
filter(!grepl("Cruise_NorthSea", Tag)) %>%
separate(Tag, into = c("Location", "Station_Number", "Depth"), sep = "_", convert = TRUE) %>%
mutate(
Overlay_Gate = gsub("Gate ", "", Overlay_Gate),
Gate = gsub("Gate ", "", Gate),
Gate = ifelse(tolower(Gate) == "none", "0", Gate)  # Replace "None" with "O"
) %>%
mutate(Location_Station = paste(Location, Station_Number, sep = "_")) %>%
filter(Depth %in% c(7, 15, 30)) %>%
filter(!Location_Station %in% c("PE477_7", "PE486_8")) %>%
filter(!grepl("SSC425", Filename)) %>%
filter(!grepl("8m", Filename))
write.csv(phyto_counts, file = "./phytoplakton_counts_pe477_pe486.csv", row.names= F)
write.csv(phyto_counts, file = "./phytoplankton_counts_pe477_pe486.csv", row.names= F)
phyto_counts <- do.call(rbind, stacked_data)
phyto_counts <- phyto_counts %>%
mutate(Tag = sub(".*_(PE\\d+_\\d+_\\d+).*", "\\1", Filename)) %>%
filter(!grepl("Cruise_NorthSea", Tag)) %>%
separate(Tag, into = c("Location", "Station_Number", "Depth"), sep = "_", convert = TRUE) %>%
mutate(
Overlay_Gate = gsub("Gate ", "", Overlay_Gate),
Gate = gsub("Gate ", "", Gate),
Gate = ifelse(tolower(Gate) == "none", "0", Gate)  # Replace "None" with "O"
) %>%
mutate(Location_Station = paste(Location, Station_Number, sep = "_")) %>%
filter(Depth %in% c(7, 15, 30)) %>%
#filter(!Location_Station %in% c("PE477_7", "PE486_8")) %>%
filter(!grepl("SSC425", Filename)) %>%
filter(!grepl("8m", Filename))
write.csv(phyto_counts, file = "./phytoplankton_counts_pe477_pe486.csv", row.names= F)
custom_palette <- c(
"PE477_1" = "#1f77b4", "PE477_2" = "#ff7f0e", "PE477_3" = "#2ca02c",
"PE477_4" = "#d62728", "PE477_5" = "#9467bd", "PE477_6" = "#8c564b",
"PE486_1" = "#e377c2", "PE486_2" = "#7f7f7f", "PE486_3" = "#bcbd22",
"PE486_4" = "#17becf", "PE486_5" = "#aec7e8", "PE486_6" = "#ffbb78",
"PE477_7" = "#98df8a", "PE486_7" = "#ff9896"
)
# Create the plot with facets for Depth and Gate
ggplot(phyto_counts, aes(x = Location_Station, y = Total_Events, fill = Location_Station)) +
geom_bar(stat = "identity") + # Bar plot with count of events
facet_grid(Depth ~ Gate, scales = "fixed", switch = "both") + # Facets for Depth and Gate
scale_fill_manual(values = custom_palette) +
labs(
title = "Distribution of Events Across Location_Station",
x = "Location_Station",
y = "Number of Events"
) +
theme_bw() +
theme(
strip.background = element_rect(fill = "lightgray", colour = "black"),
strip.text = element_text(size = 10, face = "bold"),
axis.text.x = element_text(angle = 90)
)
ggsave("phyto_abundance_facet_plot_depths.svg", width = 24, height = 8, dpi = 800)
# Create the plot with facets for Depth and Gate
ggplot(phyto_counts %>%
filter(!Gate %in% c(0, 1, 14, 3, 4, 5, 6))
, aes(x = Location_Station, y = Total_Events, fill = Location_Station)) +
geom_bar(stat = "identity") + # Bar plot with count of events
facet_grid(Depth ~ Gate, scales = "fixed", switch = "both") + # Facets for Depth and Gate
scale_fill_manual(values = custom_palette) +
labs(
title = "Distribution of Events Across Location_Station",
x = "Location_Station",
y = "Number of Events"
) +
theme_bw() +
theme(
strip.background = element_rect(fill = "lightgray", colour = "black"),
strip.text = element_text(size = 10, face = "bold"),
axis.text.x = element_text(angle = 90)
)
phyto_counts <- phyto_counts %>%
mutate(Tag = sub(".*_(PE\\d+_\\d+_\\d+).*", "\\1", Filename)) %>%
filter(!grepl("Cruise_NorthSea", Tag)) %>%
separate(Tag, into = c("Location", "Station_Number", "Depth"), sep = "_", convert = TRUE) %>%
mutate(
Overlay_Gate = gsub("Gate ", "", Overlay_Gate),
Gate = gsub("Gate ", "", Gate),
Gate = ifelse(tolower(Gate) == "none", "0", Gate)  # Replace "None" with "O"
) %>%
mutate(Location_Station = paste(Location, Station_Number, sep = "_")) %>%
filter(Depth %in% c(7, 15, 30)) %>%
#filter(!Location_Station %in% c("PE477_7", "PE486_8")) %>%
filter(!grepl("SSC425", Filename)) %>%
filter(!grepl("8m", Filename)) %>%
filter(!grepl("Bottle11", Filename))
write.csv(phyto_counts, file = "./phytoplankton_counts_pe477_pe486.csv", row.names= F)
