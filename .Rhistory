separate(Tag, into = c("Location", "Station_Number", "Depth"), sep = "_", convert = TRUE) %>%
mutate(
Overlay_Gate = gsub("Gate ", "", Overlay_Gate),
Gate = gsub("Gate ", "", Gate),
Gate = ifelse(tolower(Gate) == "none", "0", Gate)  # Replace "None" with "O"
) %>%
mutate(Location_Station = paste(Location, Station_Number, sep = "_")) %>%
filter(Depth %in% c(7, 15, 30)) %>%
#filter(!Location_Station %in% c("PE477_7", "PE486_8")) %>%
filter(!grepl("SSC425", Filename)) %>%
filter(!grepl("8m", Filename)) %>%
filter(!grepl("Bottle11", Filename))
{library(flowCore)
fcs_dir <- "C:/Users/hisham.shaikh/OneDrive - UGent/Projects/Microbial_Abundances/Microbial_Abundances_NJ2020_PE477_PE486/Algal_Abundances_NJ2020_PE477_PE486/Raw_Data_Algal_Abundances_NJ2020_PE477_PE486/PE477_PE486_Algal_Files"
fcs_files <- list.files(fcs_dir, pattern = "\\.fcs$", full.names = TRUE)
# Initialize a data frame to store results
measurement_info <- data.frame(File = basename(fcs_files), Date = NA, Acquisition_Duration = NA)
# Loop through each file and extract metadata
for (i in seq_along(fcs_files)) {
tryCatch({
fcs_data <- read.FCS(fcs_files[i], transformation = FALSE, truncate_max_range = FALSE)
metadata <- keyword(fcs_data)  # Extract metadata
# Extract measurement date
measurement_info$Date[i] <- metadata[["$DATE"]]
# Extract and compute measurement duration
if (!is.null(metadata[["$BTIM"]]) && !is.null(metadata[["$ETIM"]])) {
start_time <- as.POSIXct(metadata[["$BTIM"]], format="%H:%M:%S")
end_time <- as.POSIXct(metadata[["$ETIM"]], format="%H:%M:%S")
measurement_info$Acquisition_Duration[i] <- as.numeric(difftime(end_time, start_time, units="mins"))
} else {
measurement_info$Acquisition_Duration[i] <- NA  # Assign NA if time info is missing
}
}, error = function(e) {
message(paste("Skipping file due to error:", fcs_files[i]))  # Print message
measurement_info$Date[i] <- NA
measurement_info$Acquisition_Duration[i] <- NA
})
}
measurement_info <- measurement_info %>%
mutate(Tag = sub(".*_(PE\\d+_\\d+_\\d+).*", "\\1", File)) %>%
filter(!grepl("Cruise_NorthSea", Tag))%>%
separate(Tag, into = c("Location", "Station_Number", "Depth"), sep = "_", convert = TRUE) %>%
mutate(Acquisition_Duration = round(replace_na(Acquisition_Duration, 10)))
}
phyto_counts
measurement_info
measurement_info <- measurement_info %>%
na.omit()
phyto_counts <- phyto_counts %>%
left_join(measurement_info %>% select(Location, Station_Number, Depth, Acquisition_Duration),
by = c("Location", "Station_Number", "Depth")) %>%
# Add Flow Rate based on Location
mutate(Flow_Rate = case_when(
Location == "PE477" ~ 129,   # Flow rate for PE477
Location == "PE486" ~ 107,   # Flow rate for PE486
TRUE ~ NA_real_            # Assign NA if Location is neither
)) %>%
# Calculate Cells per mL
mutate(cells_per_mL = Total_Events / (Acquisition_Duration * Flow_Rate * 1e-3))
measurement_info
measurement_info <- measurement_info %>%
mutate(Tag = sub(".*_(PE\\d+_\\d+_\\d+).*", "\\1", File)) %>%
dplyr::filter(!grepl("Cruise_NorthSea", Tag))%>%
separate(Tag, into = c("Location", "Station_Number", "Depth"), sep = "_", convert = TRUE) %>%
mutate(Acquisition_Duration = round(replace_na(Acquisition_Duration, 10)))
measurement_info
phyto_counts <- phyto_counts %>%
left_join(measurement_info %>% select(Location, Station_Number, Depth, Acquisition_Duration),
by = c("Location", "Station_Number", "Depth")) %>%
# Add Flow Rate based on Location
mutate(Flow_Rate = case_when(
Location == "PE477" ~ 129,   # Flow rate for PE477
Location == "PE486" ~ 107,   # Flow rate for PE486
TRUE ~ NA_real_            # Assign NA if Location is neither
)) %>%
# Calculate Cells per mL
mutate(cells_per_mL = Total_Events / (Acquisition_Duration * Flow_Rate * 1e-3))
phyto_counts <- do.call(rbind, stacked_data)
phyto_counts <- phyto_counts %>%
mutate(Tag = sub(".*_(PE\\d+_\\d+_\\d+).*", "\\1", Filename)) %>%
filter(!grepl("Cruise_NorthSea", Tag)) %>%
separate(Tag, into = c("Location", "Station_Number", "Depth"), sep = "_", convert = TRUE) %>%
mutate(
Overlay_Gate = gsub("Gate ", "", Overlay_Gate),
Gate = gsub("Gate ", "", Gate),
Gate = ifelse(tolower(Gate) == "none", "0", Gate)  # Replace "None" with "O"
) %>%
mutate(Location_Station = paste(Location, Station_Number, sep = "_")) %>%
filter(Depth %in% c(7, 15, 30)) %>%
#filter(!Location_Station %in% c("PE477_7", "PE486_8")) %>%
filter(!grepl("SSC425", Filename)) %>%
filter(!grepl("8m", Filename)) %>%
filter(!grepl("Bottle11", Filename))
phyto_counts <- do.call(rbind, stacked_data)
phyto_counts <- phyto_counts %>%
mutate(Tag = sub(".*_(PE\\d+_\\d+_\\d+).*", "\\1", Filename)) %>%
dplyr::filter(!grepl("Cruise_NorthSea", Tag)) %>%
separate(Tag, into = c("Location", "Station_Number", "Depth"), sep = "_", convert = TRUE) %>%
mutate(
Overlay_Gate = gsub("Gate ", "", Overlay_Gate),
Gate = gsub("Gate ", "", Gate),
Gate = ifelse(tolower(Gate) == "none", "0", Gate)  # Replace "None" with "O"
) %>%
mutate(Location_Station = paste(Location, Station_Number, sep = "_")) %>%
dplyr::filter(Depth %in% c(7, 15, 30)) %>%
#filter(!Location_Station %in% c("PE477_7", "PE486_8")) %>%
dplyr::filter(!grepl("SSC425", Filename)) %>%
dplyr::filter(!grepl("8m", Filename)) %>%
dplyr::filter(!grepl("Bottle11", Filename))
phyto_counts
phyto_counts <- phyto_counts %>%
left_join(measurement_info %>% select(Location, Station_Number, Depth, Acquisition_Duration),
by = c("Location", "Station_Number", "Depth")) %>%
# Add Flow Rate based on Location
mutate(Flow_Rate = case_when(
Location == "PE477" ~ 129,   # Flow rate for PE477
Location == "PE486" ~ 107,   # Flow rate for PE486
TRUE ~ NA_real_            # Assign NA if Location is neither
)) %>%
# Calculate Cells per mL
mutate(cells_per_mL = Total_Events / (Acquisition_Duration * Flow_Rate * 1e-3))
measurement_info <- measurement_info %>%
na.omit() %>%
mutate(Station_Number = as.integer(Station_Number))
measurement_info
measurement_info <- measurement_info %>%
mutate(Station_Number = as.integer(Station_Number))%>%
na.omit()
measurement_info
phyto_counts <- phyto_counts %>%
left_join(measurement_info %>% select(Location, Station_Number, Depth, Acquisition_Duration),
by = c("Location", "Station_Number", "Depth")) %>%
# Add Flow Rate based on Location
mutate(Flow_Rate = case_when(
Location == "PE477" ~ 129,   # Flow rate for PE477
Location == "PE486" ~ 107,   # Flow rate for PE486
TRUE ~ NA_real_            # Assign NA if Location is neither
)) %>%
# Calculate Cells per mL
mutate(cells_per_mL = Total_Events / (Acquisition_Duration * Flow_Rate * 1e-3))
measurement_info <- measurement_info %>%
mutate(Station_Number = as.integer(Station_Number),
Depth = as.integer(Depth))%>%
na.omit()
phyto_counts <- phyto_counts %>%
left_join(measurement_info %>% select(Location, Station_Number, Depth, Acquisition_Duration),
by = c("Location", "Station_Number", "Depth")) %>%
# Add Flow Rate based on Location
mutate(Flow_Rate = case_when(
Location == "PE477" ~ 129,   # Flow rate for PE477
Location == "PE486" ~ 107,   # Flow rate for PE486
TRUE ~ NA_real_            # Assign NA if Location is neither
)) %>%
# Calculate Cells per mL
mutate(cells_per_mL = Total_Events / (Acquisition_Duration * Flow_Rate * 1e-3))
View(phyto_counts)
{library(flowCore)
fcs_dir <- "C:/Users/hisham.shaikh/OneDrive - UGent/Projects/Microbial_Abundances/Microbial_Abundances_NJ2020_PE477_PE486/Algal_Abundances_NJ2020_PE477_PE486/Raw_Data_Algal_Abundances_NJ2020_PE477_PE486/PE477_PE486_Algal_Files"
fcs_files <- list.files(fcs_dir, pattern = "\\.fcs$", full.names = TRUE)
# Initialize a data frame to store results
measurement_info <- data.frame(File = basename(fcs_files), Date = NA, Acquisition_Duration = NA)
# Loop through each file and extract metadata
for (i in seq_along(fcs_files)) {
tryCatch({
fcs_data <- read.FCS(fcs_files[i], transformation = FALSE, truncate_max_range = FALSE)
metadata <- keyword(fcs_data)  # Extract metadata
# Extract measurement date
measurement_info$Date[i] <- metadata[["$DATE"]]
# Extract and compute measurement duration
if (!is.null(metadata[["$BTIM"]]) && !is.null(metadata[["$ETIM"]])) {
start_time <- as.POSIXct(metadata[["$BTIM"]], format="%H:%M:%S")
end_time <- as.POSIXct(metadata[["$ETIM"]], format="%H:%M:%S")
measurement_info$Acquisition_Duration[i] <- as.numeric(difftime(end_time, start_time, units="mins"))
} else {
measurement_info$Acquisition_Duration[i] <- NA  # Assign NA if time info is missing
}
}, error = function(e) {
message(paste("Skipping file due to error:", fcs_files[i]))  # Print message
measurement_info$Date[i] <- NA
measurement_info$Acquisition_Duration[i] <- NA
})
}
measurement_info <- measurement_info %>%
mutate(Tag = sub(".*_(PE\\d+_\\d+_\\d+).*", "\\1", File)) %>%
dplyr::filter(!grepl("Cruise_NorthSea", Tag))%>%
separate(Tag, into = c("Location", "Station_Number", "Depth"), sep = "_", convert = TRUE) %>%
mutate(Acquisition_Duration = round(replace_na(Acquisition_Duration, 10)))
}
View(flowrate)
View(measurement_info)
View(phyto_counts)
write.csv(phyto_counts, file = "./phytoplankton_counts_pe477_pe486.csv", row.names= F)
custom_palette <- c(
"PE477_1" = "#1f77b4", "PE477_2" = "#ff7f0e", "PE477_3" = "#2ca02c",
"PE477_4" = "#d62728", "PE477_5" = "#9467bd", "PE477_6" = "#8c564b",
"PE486_1" = "#e377c2", "PE486_2" = "#7f7f7f", "PE486_3" = "#bcbd22",
"PE486_4" = "#17becf", "PE486_5" = "#aec7e8", "PE486_6" = "#ffbb78",
"PE477_7" = "#98df8a", "PE486_7" = "#ff9896"
)
# Create the plot with facets for Depth and Gate
ggplot(phyto_counts, aes(x = Location_Station, y = cells_per_mL, fill = Location_Station)) +
geom_bar(stat = "identity") + # Bar plot with count of events
facet_grid(Depth ~ Gate, scales = "fixed", switch = "both") + # Facets for Depth and Gate
scale_fill_manual(values = custom_palette) +
labs(
title = "Distribution of Events Across Location_Station",
x = "Location_Station",
y = "Number of Events"
) +
theme_bw() +
theme(
strip.background = element_rect(fill = "lightgray", colour = "black"),
strip.text = element_text(size = 10, face = "bold"),
axis.text.x = element_text(angle = 90)
)
ggsave("phyto_abundance_facet_plot_depths.svg", width = 24, height = 8, dpi = 800)
# Create the plot with facets for Depth and Gate
ggplot(phyto_counts %>%
filter(!Gate %in% c(0, 1, 14, 3, 4, 5, 6))
, aes(x = Location_Station, y = cells_per_mL, fill = Location_Station)) +
geom_bar(stat = "identity") + # Bar plot with count of events
facet_grid(Depth ~ Gate, scales = "fixed", switch = "both") + # Facets for Depth and Gate
scale_fill_manual(values = custom_palette) +
labs(
title = "Distribution of Events Across Location_Station",
x = "Location_Station",
y = "Number of Events"
) +
theme_bw() +
theme(
strip.background = element_rect(fill = "lightgray", colour = "black"),
strip.text = element_text(size = 10, face = "bold"),
axis.text.x = element_text(angle = 90)
)
# Add PCA results and metadata back to the dataset
pca_data <- pca_data %>%
mutate(
PC1 = pca_result$x[, 1],
PC2 = pca_result$x[, 2]
)
View(phyto_counts)
View(flowrate)
View(measurement_info)
measurement_info <- measurement_info %>%
mutate(Date = case_when(
grepl("Cruise_NorthSea_PE477_Algae_PE477_7_7m_Bottle3.fcs", File) ~ "11-MAY-2021",
TRUE ~ NA_character_
)) %>%
mutate(Station_Number = as.integer(Station_Number),
Depth = as.integer(Depth))%>%
na.omit()
{library(flowCore)
fcs_dir <- "C:/Users/hisham.shaikh/OneDrive - UGent/Projects/Microbial_Abundances/Microbial_Abundances_NJ2020_PE477_PE486/Algal_Abundances_NJ2020_PE477_PE486/Raw_Data_Algal_Abundances_NJ2020_PE477_PE486/PE477_PE486_Algal_Files"
fcs_files <- list.files(fcs_dir, pattern = "\\.fcs$", full.names = TRUE)
# Initialize a data frame to store results
measurement_info <- data.frame(File = basename(fcs_files), Date = NA, Acquisition_Duration = NA)
# Loop through each file and extract metadata
for (i in seq_along(fcs_files)) {
tryCatch({
fcs_data <- read.FCS(fcs_files[i], transformation = FALSE, truncate_max_range = FALSE)
metadata <- keyword(fcs_data)  # Extract metadata
# Extract measurement date
measurement_info$Date[i] <- metadata[["$DATE"]]
# Extract and compute measurement duration
if (!is.null(metadata[["$BTIM"]]) && !is.null(metadata[["$ETIM"]])) {
start_time <- as.POSIXct(metadata[["$BTIM"]], format="%H:%M:%S")
end_time <- as.POSIXct(metadata[["$ETIM"]], format="%H:%M:%S")
measurement_info$Acquisition_Duration[i] <- as.numeric(difftime(end_time, start_time, units="mins"))
} else {
measurement_info$Acquisition_Duration[i] <- NA  # Assign NA if time info is missing
}
}, error = function(e) {
message(paste("Skipping file due to error:", fcs_files[i]))  # Print message
measurement_info$Date[i] <- NA
measurement_info$Acquisition_Duration[i] <- NA
})
}
measurement_info <- measurement_info %>%
mutate(Tag = sub(".*_(PE\\d+_\\d+_\\d+).*", "\\1", File)) %>%
dplyr::filter(!grepl("Cruise_NorthSea", Tag))%>%
separate(Tag, into = c("Location", "Station_Number", "Depth"), sep = "_", convert = TRUE) %>%
mutate(Acquisition_Duration = round(replace_na(Acquisition_Duration, 10)))
}
measurement_info <- measurement_info %>%
mutate(Date = case_when(
grepl("Cruise_NorthSea_PE477_Algae_PE477_7_7m_Bottle3.fcs", File) ~ "11-MAY-2021",
TRUE ~ NA_character_
)) %>%
mutate(Station_Number = as.integer(Station_Number),
Depth = as.integer(Depth))%>%
na.omit()
dplyr::last_dplyr_warnings()
{library(flowCore)
fcs_dir <- "C:/Users/hisham.shaikh/OneDrive - UGent/Projects/Microbial_Abundances/Microbial_Abundances_NJ2020_PE477_PE486/Algal_Abundances_NJ2020_PE477_PE486/Raw_Data_Algal_Abundances_NJ2020_PE477_PE486/PE477_PE486_Algal_Files"
fcs_files <- list.files(fcs_dir, pattern = "\\.fcs$", full.names = TRUE)
# Initialize a data frame to store results
measurement_info <- data.frame(File = basename(fcs_files), Date = NA, Acquisition_Duration = NA)
# Loop through each file and extract metadata
for (i in seq_along(fcs_files)) {
tryCatch({
fcs_data <- read.FCS(fcs_files[i], transformation = FALSE, truncate_max_range = FALSE)
metadata <- keyword(fcs_data)  # Extract metadata
# Extract measurement date
measurement_info$Date[i] <- metadata[["$DATE"]]
# Extract and compute measurement duration
if (!is.null(metadata[["$BTIM"]]) && !is.null(metadata[["$ETIM"]])) {
start_time <- as.POSIXct(metadata[["$BTIM"]], format="%H:%M:%S")
end_time <- as.POSIXct(metadata[["$ETIM"]], format="%H:%M:%S")
measurement_info$Acquisition_Duration[i] <- as.numeric(difftime(end_time, start_time, units="mins"))
} else {
measurement_info$Acquisition_Duration[i] <- NA  # Assign NA if time info is missing
}
}, error = function(e) {
message(paste("Skipping file due to error:", fcs_files[i]))  # Print message
measurement_info$Date[i] <- NA
measurement_info$Acquisition_Duration[i] <- NA
})
}
measurement_info <- measurement_info %>%
mutate(Tag = sub(".*_(PE\\d+_\\d+_\\d+).*", "\\1", File)) %>%
dplyr::filter(!grepl("Cruise_NorthSea", Tag))%>%
separate(Tag, into = c("Location", "Station_Number", "Depth"), sep = "_", convert = TRUE) %>%
mutate(Acquisition_Duration = round(replace_na(Acquisition_Duration, 10)))
}
measurement_info <- measurement_info %>%
mutate(Date = case_when(
grepl("Cruise_NorthSea_PE477_Algae_PE477_7_7m_Bottle3.fcs", File) ~ "11-MAY-2021",
TRUE ~ NA_character_
)) %>%
mutate(Station_Number = as.integer(Station_Number),
Depth = as.integer(Depth))%>%
na.omit()
measurement_info <- measurement_info %>%
mutate(Date = case_when(
grepl("Cruise_NorthSea_PE477_Algae_PE477_7_7m_Bottle3.fcs", File) ~ "11-MAY-2021",
TRUE ~ NA_character_
)) %>%
mutate(Station_Number = as.integer(Station_Number),
Depth = as.integer(Depth))%>%
na.omit()
View(measurement_info)
{library(flowCore)
fcs_dir <- "C:/Users/hisham.shaikh/OneDrive - UGent/Projects/Microbial_Abundances/Microbial_Abundances_NJ2020_PE477_PE486/Algal_Abundances_NJ2020_PE477_PE486/Raw_Data_Algal_Abundances_NJ2020_PE477_PE486/PE477_PE486_Algal_Files"
fcs_files <- list.files(fcs_dir, pattern = "\\.fcs$", full.names = TRUE)
# Initialize a data frame to store results
measurement_info <- data.frame(File = basename(fcs_files), Date = NA, Acquisition_Duration = NA)
# Loop through each file and extract metadata
for (i in seq_along(fcs_files)) {
tryCatch({
fcs_data <- read.FCS(fcs_files[i], transformation = FALSE, truncate_max_range = FALSE)
metadata <- keyword(fcs_data)  # Extract metadata
# Extract measurement date
measurement_info$Date[i] <- metadata[["$DATE"]]
# Extract and compute measurement duration
if (!is.null(metadata[["$BTIM"]]) && !is.null(metadata[["$ETIM"]])) {
start_time <- as.POSIXct(metadata[["$BTIM"]], format="%H:%M:%S")
end_time <- as.POSIXct(metadata[["$ETIM"]], format="%H:%M:%S")
measurement_info$Acquisition_Duration[i] <- as.numeric(difftime(end_time, start_time, units="mins"))
} else {
measurement_info$Acquisition_Duration[i] <- NA  # Assign NA if time info is missing
}
}, error = function(e) {
message(paste("Skipping file due to error:", fcs_files[i]))  # Print message
measurement_info$Date[i] <- NA
measurement_info$Acquisition_Duration[i] <- NA
})
}
measurement_info <- measurement_info %>%
mutate(Tag = sub(".*_(PE\\d+_\\d+_\\d+).*", "\\1", File)) %>%
dplyr::filter(!grepl("Cruise_NorthSea", Tag))%>%
separate(Tag, into = c("Location", "Station_Number", "Depth"), sep = "_", convert = TRUE) %>%
mutate(Acquisition_Duration = round(replace_na(Acquisition_Duration, 10)))
}
View(measurement_info)
measurement_info <- measurement_info %>%
mutate(Date = case_when(
grepl("Cruise_NorthSea_PE477_Algae_PE477_7_7m_Bottle3.fcs", File) ~ "11-MAY-2021",
TRUE ~ NA_character_
))
View(measurement_info)
{library(flowCore)
fcs_dir <- "C:/Users/hisham.shaikh/OneDrive - UGent/Projects/Microbial_Abundances/Microbial_Abundances_NJ2020_PE477_PE486/Algal_Abundances_NJ2020_PE477_PE486/Raw_Data_Algal_Abundances_NJ2020_PE477_PE486/PE477_PE486_Algal_Files"
fcs_files <- list.files(fcs_dir, pattern = "\\.fcs$", full.names = TRUE)
# Initialize a data frame to store results
measurement_info <- data.frame(File = basename(fcs_files), Date = NA, Acquisition_Duration = NA)
# Loop through each file and extract metadata
for (i in seq_along(fcs_files)) {
tryCatch({
fcs_data <- read.FCS(fcs_files[i], transformation = FALSE, truncate_max_range = FALSE)
metadata <- keyword(fcs_data)  # Extract metadata
# Extract measurement date
measurement_info$Date[i] <- metadata[["$DATE"]]
# Extract and compute measurement duration
if (!is.null(metadata[["$BTIM"]]) && !is.null(metadata[["$ETIM"]])) {
start_time <- as.POSIXct(metadata[["$BTIM"]], format="%H:%M:%S")
end_time <- as.POSIXct(metadata[["$ETIM"]], format="%H:%M:%S")
measurement_info$Acquisition_Duration[i] <- as.numeric(difftime(end_time, start_time, units="mins"))
} else {
measurement_info$Acquisition_Duration[i] <- NA  # Assign NA if time info is missing
}
}, error = function(e) {
message(paste("Skipping file due to error:", fcs_files[i]))  # Print message
measurement_info$Date[i] <- NA
measurement_info$Acquisition_Duration[i] <- NA
})
}
measurement_info <- measurement_info %>%
mutate(Tag = sub(".*_(PE\\d+_\\d+_\\d+).*", "\\1", File)) %>%
dplyr::filter(!grepl("Cruise_NorthSea", Tag))%>%
separate(Tag, into = c("Location", "Station_Number", "Depth"), sep = "_", convert = TRUE) %>%
mutate(Acquisition_Duration = round(replace_na(Acquisition_Duration, 10)))
}
measurement_info <- measurement_info %>%
mutate(Date = case_when(
grepl("Cruise_NorthSea_PE477_Algae_PE477_7_7m_Bottle3.fcs", File) ~ "11-MAY-2021",
!is.na(Date) ~ Date,  # Preserve existing Date values
TRUE ~ NA_character_   # Keep NA for others without modification
))
measurement_info <- measurement_info  %>%
mutate(Station_Number = as.integer(Station_Number),
Depth = as.integer(Depth))%>%
na.omit()
phyto_counts <- phyto_counts %>%
left_join(measurement_info %>% select(Location, Station_Number, Depth, Acquisition_Duration),
by = c("Location", "Station_Number", "Depth")) %>%
# Add Flow Rate based on Location
mutate(Flow_Rate = case_when(
Location == "PE477" ~ 129,   # Flow rate for PE477
Location == "PE486" ~ 107,   # Flow rate for PE486
TRUE ~ NA_real_            # Assign NA if Location is neither
)) %>%
# Calculate Cells per mL
mutate(cells_per_mL = Total_Events / (Acquisition_Duration * Flow_Rate * 1e-3))
write.csv(phyto_counts, file = "./phytoplankton_counts_pe477_pe486.csv", row.names= F)
View(phyto_counts)
View(measurement_info)
View(flowrate)
View(phyto_counts)
View(measurement_info)
phyto_counts %>%
left_join(measurement_info %>% select(Location, Station_Number, Depth, Acquisition_Duration),
by = c("Location", "Station_Number", "Depth"))
phyto_counts <- do.call(rbind, stacked_data)
phyto_counts <- phyto_counts %>%
mutate(Tag = sub(".*_(PE\\d+_\\d+_\\d+).*", "\\1", Filename)) %>%
dplyr::filter(!grepl("Cruise_NorthSea", Tag)) %>%
separate(Tag, into = c("Location", "Station_Number", "Depth"), sep = "_", convert = TRUE) %>%
mutate(
Overlay_Gate = gsub("Gate ", "", Overlay_Gate),
Gate = gsub("Gate ", "", Gate),
Gate = ifelse(tolower(Gate) == "none", "0", Gate)  # Replace "None" with "O"
) %>%
mutate(Location_Station = paste(Location, Station_Number, sep = "_")) %>%
dplyr::filter(Depth %in% c(7, 15, 30)) %>%
#filter(!Location_Station %in% c("PE477_7", "PE486_8")) %>%
dplyr::filter(!grepl("SSC425", Filename)) %>%
dplyr::filter(!grepl("8m", Filename)) %>%
dplyr::filter(!grepl("Bottle11", Filename))
{library(flowCore)
fcs_dir <- "C:/Users/hisham.shaikh/OneDrive - UGent/Projects/Microbial_Abundances/Microbial_Abundances_NJ2020_PE477_PE486/Algal_Abundances_NJ2020_PE477_PE486/Raw_Data_Algal_Abundances_NJ2020_PE477_PE486/PE477_PE486_Algal_Files"
fcs_files <- list.files(fcs_dir, pattern = "\\.fcs$", full.names = TRUE)
# Initialize a data frame to store results
measurement_info <- data.frame(File = basename(fcs_files), Date = NA, Acquisition_Duration = NA)
# Loop through each file and extract metadata
for (i in seq_along(fcs_files)) {
tryCatch({
fcs_data <- read.FCS(fcs_files[i], transformation = FALSE, truncate_max_range = FALSE)
metadata <- keyword(fcs_data)  # Extract metadata
# Extract measurement date
measurement_info$Date[i] <- metadata[["$DATE"]]
# Extract and compute measurement duration
if (!is.null(metadata[["$BTIM"]]) && !is.null(metadata[["$ETIM"]])) {
start_time <- as.POSIXct(metadata[["$BTIM"]], format="%H:%M:%S")
end_time <- as.POSIXct(metadata[["$ETIM"]], format="%H:%M:%S")
measurement_info$Acquisition_Duration[i] <- as.numeric(difftime(end_time, start_time, units="mins"))
} else {
measurement_info$Acquisition_Duration[i] <- NA  # Assign NA if time info is missing
}
}, error = function(e) {
message(paste("Skipping file due to error:", fcs_files[i]))  # Print message
measurement_info$Date[i] <- NA
measurement_info$Acquisition_Duration[i] <- NA
})
}
measurement_info <- measurement_info %>%
mutate(Tag = sub(".*_(PE\\d+_\\d+_\\d+).*", "\\1", File)) %>%
dplyr::filter(!grepl("Cruise_NorthSea", Tag))%>%
separate(Tag, into = c("Location", "Station_Number", "Depth"), sep = "_", convert = TRUE) %>%
mutate(Acquisition_Duration = round(replace_na(Acquisition_Duration, 10)))
}
measurement_info <- measurement_info %>%
mutate(Date = case_when(
grepl("Cruise_NorthSea_PE477_Algae_PE477_7_7m_Bottle3.fcs", File) ~ "11-MAY-2021",
!is.na(Date) ~ Date,  # Preserve existing Date values
TRUE ~ NA_character_   # Keep NA for others without modification
))
measurement_info <- measurement_info  %>%
mutate(Station_Number = as.integer(Station_Number),
Depth = as.integer(Depth))%>%
na.omit()
phyto_counts <- phyto_counts %>%
left_join(measurement_info %>% select(Location, Station_Number, Depth, Acquisition_Duration),
by = c("Location", "Station_Number", "Depth")) %>%
# Add Flow Rate based on Location
mutate(Flow_Rate = case_when(
Location == "PE477" ~ 129,   # Flow rate for PE477
Location == "PE486" ~ 107,   # Flow rate for PE486
TRUE ~ NA_real_            # Assign NA if Location is neither
)) %>%
# Calculate Cells per mL
mutate(cells_per_mL = Total_Events / (Acquisition_Duration * Flow_Rate * 1e-3))
write.csv(phyto_counts, file = "./phytoplankton_counts_pe477_pe486.csv", row.names= F)
